---
// Sound Factory - Simple Homebase Layout
import MainLayout from '../components/layout/MainLayout.astro';

export interface Props {
  wsUrl?: string;
}

const { wsUrl = 'ws://localhost:8080' } = Astro.props;
---

<MainLayout title="Sound Factory - Homebase">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #000000;
            color: #ffffff;
            overflow: hidden;
            position: fixed;
            inset: 0;
            max-width: 420px;
            margin: 0 auto;
        }

        /* Mobile Container */
        .mobile-container {
            width: 100%;
            max-width: 420px;
            height: 100vh;
            margin: 0 auto;
            background: #000000;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        /* Header */
        .header {
            padding: 15px 20px;
            background: rgba(0, 0, 0, 0.9);
            border-bottom: 2px solid #ffffff;
            text-align: center;
            z-index: 200;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: bold;
            background: linear-gradient(45deg, #ffffff, #cccccc);
            background-clip: text;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        /* TikTok Video Area */
        .tiktok-area {
            flex: 1;
            background: #000000;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            border-bottom: 1px solid #333;
        }

        .tiktok-placeholder {
            color: #666;
            font-size: 2rem;
            text-align: center;
        }

        /* Platform Switcher Corners */
        .platform-corner {
            position: absolute;
            width: 50px;
            height: 50px;
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-size: 0.8rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .platform-corner:hover {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
        }

        .corner-tl { top: 10px; left: 10px; }
        .corner-tr { top: 10px; right: 10px; }
        .corner-bl { bottom: 10px; left: 10px; }
        .corner-br { bottom: 10px; right: 10px; }

        /* Upload/Camera Buttons */
        .upload-controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
        }

        .upload-btn {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            color: #fff;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 1.2rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-btn:hover {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
        }

        /* Floating Owncast Stream */
        .owncast-stream {
            position: absolute;
            top: 80px;
            left: 10px;
            width: 120px;
            height: 80px;
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #00ff00;
            border-radius: 8px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            z-index: 100;
            cursor: move;
            box-shadow: 0 4px 20px rgba(0, 255, 0, 0.3);
        }

        .owncast-title {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .owncast-status {
            color: #00ff00;
            font-size: 0.7rem;
        }

        /* HOMEBASE - Single Horizontal Line */
        .homebase {
            background: #000000;
            border-top: 2px solid #333;
            padding: 10px 5px;
            display: flex;
            align-items: center;
            gap: 5px;
            overflow-x: auto;
            min-height: 60px;
        }

        /* Money Buttons */
        .money-section {
            display: flex;
            gap: 3px;
            flex-shrink: 0;
        }

        .money-btn {
            background: linear-gradient(45deg, #10b981, #34d399);
            color: #000;
            border: none;
            padding: 8px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 40px;
        }

        .money-btn:nth-child(2) { background: linear-gradient(45deg, #3b82f6, #60a5fa); }
        .money-btn:nth-child(3) { background: linear-gradient(45deg, #8b5cf6, #a78bfa); }
        .money-btn:nth-child(4) { background: linear-gradient(45deg, #ec4899, #f472b6); }
        .money-btn:nth-child(5) { background: linear-gradient(45deg, #f59e0b, #fbbf24); }
        .money-btn:nth-child(6) { background: linear-gradient(45deg, #ef4444, #f87171); }

        .money-btn:hover {
            transform: scale(1.1);
        }

        .money-btn:active {
            transform: scale(0.9);
        }

        /* Reaction Buttons */
        .reaction-section {
            display: flex;
            gap: 3px;
            flex-shrink: 0;
        }

        .reaction-btn {
            width: 35px;
            height: 35px;
            border: none;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 50%;
            font-size: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .reaction-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            transform: translate(-50%, -50%);
            background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, transparent 70%);
            transition: width 0.6s, height 0.6s;
            border-radius: 50%;
        }

        .reaction-btn:hover::before {
            width: 60px;
            height: 60px;
        }

        .reaction-btn:hover {
            transform: translateY(-2px) scale(1.1);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.2);
        }

        .reaction-btn:active {
            transform: scale(0.9);
        }

        /* Special SF/JP buttons */
        .sf-btn, .jp-btn {
            font-size: 0.7rem;
            font-weight: 700;
            background: linear-gradient(135deg, rgba(255, 0, 128, 0.2), rgba(128, 0, 255, 0.2));
            color: #fff;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            letter-spacing: 0.5px;
        }

        .jp-btn {
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.2), rgba(255, 165, 0, 0.2));
        }

        .sf-btn:hover {
            box-shadow: 0 4px 15px rgba(255, 0, 128, 0.4);
        }

        .jp-btn:hover {
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.4);
        }

        /* Chat Section */
        .chat-section {
            flex: 1;
            display: flex;
            gap: 5px;
            align-items: center;
            min-width: 0;
        }

        .chat-input {
            flex: 1;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            color: #fff;
            padding: 8px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            outline: none;
            min-width: 80px;
        }

        .chat-input::placeholder {
            color: #666;
        }

        .chat-input:focus {
            border-color: #00ff00;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.3);
        }

        .send-btn {
            background: #00ff00;
            color: #000;
            border: none;
            padding: 8px 12px;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .send-btn:hover {
            background: #00cc00;
            transform: scale(1.05);
        }

        /* Grid Buttons */
        .grid-buttons {
            display: flex;
            gap: 3px;
            flex-shrink: 0;
        }

        .grid-btn {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            color: #fff;
            padding: 6px 8px;
            border-radius: 8px;
            font-size: 0.7rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 30px;
        }

        .grid-btn:hover {
            border-color: #00ff00;
            background: rgba(0, 255, 0, 0.1);
        }

        /* Floating Reactions Container */
        .reactions-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100vh;
            pointer-events: none;
            z-index: 35;
            max-width: 420px;
            margin: 0 auto;
        }

        .floating-reaction {
            position: absolute;
            font-size: 2rem;
            pointer-events: none;
            filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.4));
        }

        /* Money Container */
        .money-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100vh;
            pointer-events: none;
            z-index: 35;
            max-width: 420px;
            margin: 0 auto;
        }

        /* Animations */
        @keyframes elegantFloat {
            0% {
                transform: translateY(0) scale(0) rotate(0deg);
                opacity: 0;
            }
            5% {
                transform: translateY(-10px) scale(0.5) rotate(5deg);
                opacity: 0.8;
            }
            15% {
                transform: translateY(-50px) scale(1) rotate(10deg);
                opacity: 1;
            }
            85% {
                opacity: 0.8;
            }
            100% {
                transform: translateY(-400px) translateX(var(--drift)) scale(0.8) rotate(180deg);
                opacity: 0;
            }
        }

        @keyframes moneyShoot {
            0% {
                transform: translateY(0) translateX(0) rotate(0deg) scale(0.5);
                opacity: 0;
            }
            10% {
                transform: translateY(-10vh) translateX(var(--drift-x)) rotate(90deg) scale(1);
                opacity: 1;
            }
            100% {
                transform: translateY(-80vh) translateX(calc(var(--drift-x) * 2)) rotate(720deg) scale(0.8);
                opacity: 0;
            }
        }

        /* Mobile optimizations */
        @media (max-width: 420px) {
            .money-btn {
                padding: 6px 8px;
                font-size: 0.7rem;
                min-width: 35px;
            }
            
            .reaction-btn {
                width: 30px;
                height: 30px;
                font-size: 0.9rem;
            }
            
            .sf-btn, .jp-btn {
                font-size: 0.6rem;
            }
            
            .chat-input {
                font-size: 0.7rem;
                padding: 6px 10px;
            }
            
            .send-btn {
                padding: 6px 10px;
                font-size: 0.7rem;
            }
            
            .grid-btn {
                padding: 5px 6px;
                font-size: 0.6rem;
                min-width: 25px;
            }
        }
    </style>

    <div class="mobile-container">
        <!-- Header -->
        <div class="header">
            <div class="logo">SOUND FACTORY</div>
        </div>

        <!-- TikTok Video Area -->
        <div class="tiktok-area">
            <!-- Platform Switcher Corners -->
            <div class="platform-corner corner-tl">IG</div>
            <div class="platform-corner corner-tr">SF</div>
            <div class="platform-corner corner-bl">TT</div>
            <div class="platform-corner corner-br">FB</div>

            <!-- Upload/Camera Controls -->
            <div class="upload-controls">
                <button class="upload-btn">📹</button>
                <button class="upload-btn">📤</button>
            </div>

            <!-- TikTok Placeholder -->
            <div class="tiktok-placeholder">
                TIKTOK VIDEO<br>
                <small style="font-size: 1rem; color: #888;">(Full Screen)</small>
            </div>
        </div>

        <!-- Floating Owncast Stream -->
        <div class="owncast-stream" id="owncastStream">
            <div class="owncast-title">OWNCAST</div>
            <div class="owncast-status">LIVE</div>
        </div>

        <!-- HOMEBASE - Single Horizontal Line -->
        <div class="homebase">
            <!-- Money Section -->
            <div class="money-section">
                <button class="money-btn" data-amount="1">$1</button>
                <button class="money-btn" data-amount="5">$5</button>
                <button class="money-btn" data-amount="10">$10</button>
                <button class="money-btn" data-amount="20">$20</button>
                <button class="money-btn" data-amount="50">$50</button>
                <button class="money-btn" data-amount="100">$100</button>
            </div>

            <!-- Reaction Section -->
            <div class="reaction-section">
                <button class="reaction-btn" data-emoji="🔥" data-effect="sparkle">🔥</button>
                <button class="reaction-btn" data-emoji="🎧" data-effect="bounce">🎧</button>
                <button class="reaction-btn" data-emoji="❤️" data-effect="float">❤️</button>
                <button class="reaction-btn sf-btn" data-emoji="SF" data-effect="spiral">SF</button>
                <button class="reaction-btn jp-btn" data-emoji="JP" data-effect="sparkle">JP</button>
                <button class="reaction-btn" data-emoji="👠" data-effect="bounce">👠</button>
                <button class="reaction-btn" data-emoji="🏳️‍🌈" data-effect="spiral">🏳️‍🌈</button>
                <button class="reaction-btn" data-emoji="💃" data-effect="float">💃</button>
            </div>

            <!-- Chat Section -->
            <div class="chat-section">
                <input type="text" class="chat-input" placeholder="Type message..." id="chatInput">
                <button class="send-btn" id="sendBtn">Send</button>
            </div>

            <!-- Grid Buttons -->
            <div class="grid-buttons">
                <button class="grid-btn" id="grid1">G1</button>
                <button class="grid-btn" id="grid2">G2</button>
                <button class="grid-btn" id="grid3">G3</button>
            </div>
        </div>
    </div>

    <!-- Floating Reactions Container -->
    <div id="reactions-container" class="reactions-container"></div>

    <!-- Money Container -->
    <div id="money-container" class="money-container"></div>

    <script>
        class SoundFactoryHomebase {
            constructor() {
                this.init();
            }

            init() {
                this.setupReactionButtons();
                this.setupMoneyButtons();
                this.setupChatSystem();
                this.setupGridButtons();
                this.setupOwncastDragging();
                this.setupPlatformSwitcher();
            }

            setupReactionButtons() {
                const reactionButtons = document.querySelectorAll('.reaction-btn');
                
                reactionButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const emoji = button.dataset.emoji;
                        const effect = button.dataset.effect;
                        
                        // Add glow to button
                        button.style.boxShadow = '0 0 20px rgba(255, 255, 255, 0.8)';
                        setTimeout(() => button.style.boxShadow = '', 500);
                        
                        // Create floating reaction
                        this.createFloatingReaction(emoji, e.currentTarget, effect);
                    });
                });
            }

            createFloatingReaction(emoji, button, effect) {
                const reaction = document.createElement('div');
                reaction.className = 'floating-reaction';
                reaction.textContent = emoji;
                
                // Handle text reactions (SF, JP)
                if (emoji === 'SF') {
                    reaction.style.fontWeight = '700';
                    reaction.style.fontSize = '1.5rem';
                    reaction.style.background = 'linear-gradient(45deg, #ff0080, #8000ff)';
                    reaction.style.webkitBackgroundClip = 'text';
                    reaction.style.webkitTextFillColor = 'transparent';
                    reaction.style.backgroundClip = 'text';
                } else if (emoji === 'JP') {
                    reaction.style.fontWeight = '700';
                    reaction.style.fontSize = '1.5rem';
                    reaction.style.background = 'linear-gradient(45deg, #FFD700, #FFA500)';
                    reaction.style.webkitBackgroundClip = 'text';
                    reaction.style.webkitTextFillColor = 'transparent';
                    reaction.style.backgroundClip = 'text';
                }
                
                // Get button position
                const rect = button.getBoundingClientRect();
                const startX = rect.left + rect.width / 2;
                const startY = rect.top + rect.height / 2;
                
                // Position at button
                reaction.style.left = startX + 'px';
                reaction.style.bottom = (window.innerHeight - startY) + 'px';
                
                // Random drift
                reaction.style.setProperty('--drift', (Math.random() - 0.5) * 60 + 'px');
                reaction.style.animation = 'elegantFloat 3s cubic-bezier(0.4, 0, 0.2, 1) forwards';
                
                document.getElementById('reactions-container').appendChild(reaction);
                
                // Clean up
                setTimeout(() => reaction.remove(), 3500);
            }

            setupMoneyButtons() {
                const moneyButtons = document.querySelectorAll('.money-btn');
                
                moneyButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const amount = parseInt(button.dataset.amount);
                        
                        // Button feedback
                        button.style.transform = 'scale(0.9)';
                        setTimeout(() => button.style.transform = '', 200);
                        
                        // Create money effect
                        this.createMoneyEffect(amount, e.currentTarget);
                    });
                });
            }

            createMoneyEffect(amount, button) {
                const billCount = Math.min(5, amount / 10);
                
                for (let i = 0; i < billCount; i++) {
                    setTimeout(() => {
                        const money = document.createElement('div');
                        money.className = 'floating-reaction';
                        money.textContent = '$' + Math.ceil(amount / billCount);
                        money.style.fontSize = '1.5rem';
                        money.style.fontWeight = '900';
                        money.style.color = '#10b981';
                        money.style.textShadow = '0 0 10px rgba(16, 185, 129, 0.8)';
                        
                        // Get button position
                        const rect = button.getBoundingClientRect();
                        money.style.left = (rect.left + rect.width / 2) + 'px';
                        money.style.bottom = (window.innerHeight - rect.top - rect.height / 2) + 'px';
                        
                        // Random drift
                        money.style.setProperty('--drift-x', (Math.random() - 0.5) * 100 + 'px');
                        money.style.animation = 'moneyShoot 2s ease-out forwards';
                        
                        document.getElementById('money-container').appendChild(money);
                        setTimeout(() => money.remove(), 2000);
                    }, i * 100);
                }
            }

            setupChatSystem() {
                const chatInput = document.getElementById('chatInput');
                const sendBtn = document.getElementById('sendBtn');
                
                const sendMessage = () => {
                    const message = chatInput.value.trim();
                    if (message) {
                        console.log('Sending message:', message);
                        chatInput.value = '';
                        
                        // Visual feedback
                        sendBtn.style.background = '#00aa00';
                        setTimeout(() => sendBtn.style.background = '#00ff00', 200);
                    }
                };
                
                sendBtn.addEventListener('click', sendMessage);
                chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });
            }

            setupGridButtons() {
                const gridButtons = document.querySelectorAll('.grid-btn');
                
                gridButtons.forEach((button, index) => {
                    button.addEventListener('click', () => {
                        console.log(`Grid ${index + 1} clicked`);
                        
                        // Visual feedback
                        button.style.background = 'rgba(0, 255, 0, 0.3)';
                        setTimeout(() => button.style.background = 'rgba(255, 255, 255, 0.05)', 300);
                    });
                });
            }

            setupOwncastDragging() {
                const owncast = document.getElementById('owncastStream');
                if (!owncast) return;
                
                let isDragging = false;
                let startX = 0, startY = 0, initialX = 0, initialY = 0;
                
                owncast.addEventListener('mousedown', (e) => {
                    isDragging = true;
                    startX = e.clientX;
                    startY = e.clientY;
                    initialX = owncast.offsetLeft;
                    initialY = owncast.offsetTop;
                    owncast.style.cursor = 'grabbing';
                });
                
                document.addEventListener('mousemove', (e) => {
                    if (!isDragging) return;
                    
                    const deltaX = e.clientX - startX;
                    const deltaY = e.clientY - startY;
                    
                    let newX = initialX + deltaX;
                    let newY = initialY + deltaY;
                    
                    // Keep within bounds
                    const maxX = window.innerWidth - owncast.offsetWidth;
                    const maxY = window.innerHeight - owncast.offsetHeight - 60; // Account for homebase
                    
                    newX = Math.max(0, Math.min(newX, maxX));
                    newY = Math.max(60, Math.min(newY, maxY)); // Account for header
                    
                    owncast.style.left = newX + 'px';
                    owncast.style.top = newY + 'px';
                });
                
                document.addEventListener('mouseup', () => {
                    isDragging = false;
                    if (owncast) {
                        owncast.style.cursor = 'move';
                    }
                });
            }

            setupPlatformSwitcher() {
                const corners = document.querySelectorAll('.platform-corner');
                
                corners.forEach(corner => {
                    corner.addEventListener('click', () => {
                        const platform = corner.textContent;
                        console.log(`Switching to platform: ${platform}`);
                        
                        // Visual feedback
                        corner.style.background = 'rgba(0, 255, 0, 0.5)';
                        setTimeout(() => corner.style.background = 'rgba(0, 0, 0, 0.7)', 300);
                    });
                });
                
                // Upload buttons
                const uploadButtons = document.querySelectorAll('.upload-btn');
                uploadButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        console.log('Upload/Camera clicked');
                        button.style.background = 'rgba(0, 255, 0, 0.5)';
                        setTimeout(() => button.style.background = 'rgba(0, 0, 0, 0.7)', 300);
                    });
                });
            }
        }

        // Initialize when page loads
        window.addEventListener('load', () => {
            const homebase = new SoundFactoryHomebase();
        });
    </script>
</MainLayout>
