---
// Sound Factory - Mobile Optimized Layout with Harmony Grid System
import MainLayout from '../components/layout/MainLayout.astro';
import Homebase from '../components/Homebase.astro';

export interface Props {
  wsUrl?: string;
}

const { wsUrl = 'ws://localhost:8080' } = Astro.props;
---

<MainLayout title="Sound Factory - Homebase">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            -webkit-tap-highlight-color: transparent;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: #000000;
            color: #ffffff;
            overflow: hidden;
            position: fixed;
            inset: 0;
            max-width: 100vw;
            margin: 0 auto;
        }

        /* Mobile Container */
        .mobile-container {
            width: 100%;
            max-width: 100vw;
            height: 100vh;
            margin: 0 auto;
            background: #000000;
            display: flex;
            flex-direction: column;
            position: relative;
        }

        /* TikTok Video Area - Reduced height for mobile */
        .tiktok-area {
            flex: 1;
            background: #000000;
            position: relative;
            display: flex;
            align-items: center;
            justify-content: center;
            border-bottom: 1px solid #333;
            min-height: 40vh; /* Reduced from taking full space */
        }

        .tiktok-placeholder {
            color: #666;
            font-size: 1.2rem; /* Reduced from 2rem */
            text-align: center;
        }

        /* Platform Switcher Corners - Smaller */
        .platform-corner {
            position: absolute;
            width: 2.5rem; /* Reduced from 50px */
            height: 2.5rem; /* Reduced from 50px */
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .platform-corner:hover {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
        }

        .corner-tl { top: 0.5rem; left: 0.5rem; }
        .corner-tr { top: 0.5rem; right: 0.5rem; }
        .corner-bl { bottom: 0.5rem; left: 0.5rem; }
        .corner-br { bottom: 0.5rem; right: 0.5rem; }

        /* Social Media Buttons - Right Side */
        .social-buttons-right {
            position: absolute;
            right: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
            z-index: 150;
        }

        .social-btn {
            width: 2.5rem;
            height: 2.5rem;
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            border-radius: 0.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #fff;
            font-size: 0.6rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .social-btn:hover {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
            transform: scale(1.1);
        }

        /* Upload/Camera Buttons - Smaller */
        .upload-controls {
            position: absolute;
            bottom: 0.8rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 0.4rem;
        }

        .upload-btn {
            background: rgba(0, 0, 0, 0.7);
            border: 1px solid #333;
            color: #fff;
            padding: 0.3rem 0.5rem;
            border-radius: 0.8rem;
            font-size: 0.8rem; /* Reduced from 1rem */
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .upload-btn:hover {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
        }

        /* Grid Buttons - Positioned Around Screen - Smaller */
        .grid-btn-top {
            position: absolute;
            top: 0.5rem;
            left: 0.5rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            color: #fff;
            padding: 0.4rem 0.5rem;
            border-radius: 50%;
            font-size: 0.7rem; /* Reduced from 1rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 2rem; /* Reduced from 35px */
            height: 2rem; /* Reduced from 35px */
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 150;
        }

        .grid-btn-middle {
            position: absolute;
            top: 50%;
            left: 0.5rem;
            transform: translateY(-50%);
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            color: #fff;
            padding: 0.4rem 0.5rem;
            border-radius: 50%;
            font-size: 0.7rem; /* Reduced from 1rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 2rem; /* Reduced from 35px */
            height: 2rem; /* Reduced from 35px */
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 150;
        }

        .grid-btn-top:hover, .grid-btn-middle:hover {
            border-color: #00ff00;
            background: rgba(0, 255, 0, 0.1);
            transform: scale(1.1);
        }

        .grid-btn-middle:hover {
            transform: translateY(-50%) scale(1.1);
        }

        /* Control Buttons Row - Reduced spacing */
        .control-row {
            display: flex;
            justify-content: center;
            gap: 0.2rem; /* Reduced from 5px */
            padding: 0.2rem; /* Reduced from 5px */
            border-bottom: 1px solid #333;
        }

        .control-section {
            display: flex;
            gap: 0.2rem; /* Reduced from 5px */
            flex-wrap: wrap;
            justify-content: center;
        }

        .control-btn {
            background: rgba(0, 0, 0, 0.8);
            border: 1px solid #333;
            color: #fff;
            padding: 0.3rem 0.5rem; /* Reduced from 6px 10px */
            border-radius: 0.8rem;
            font-size: 0.6rem; /* Reduced from 0.7rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 2.5rem; /* Reduced from 50px */
            text-align: center;
        }

        .control-btn:hover {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
            transform: scale(1.05);
        }

        .hey-btn {
            background: rgba(0, 255, 0, 0.2);
            border-color: #00ff00;
        }

        .hey-btn:hover {
            background: rgba(0, 255, 0, 0.4);
        }

        .nah-btn {
            background: rgba(255, 0, 0, 0.2);
            border-color: #ff0000;
        }

        .nah-btn:hover {
            background: rgba(255, 0, 0, 0.4);
        }

        .mute-btn {
            background: rgba(255, 165, 0, 0.2);
            border-color: #ffa500;
        }

        .mute-btn:hover {
            background: rgba(255, 165, 0, 0.4);
        }

        .mute-btn.muted {
            background: rgba(255, 0, 0, 0.4);
            border-color: #ff0000;
        }

        .block-btn {
            background: rgba(255, 0, 0, 0.3);
            border-color: #ff0000;
        }

        .block-btn:hover {
            background: rgba(255, 0, 0, 0.5);
        }

        /* Floating Owncast Stream - Smaller than typing box */
        .owncast-stream {
            position: absolute;
            top: 4rem;
            left: 0.5rem;
            width: 4rem; /* Smaller than chat input */
            height: 3rem; /* Smaller than chat input */
            background: rgba(0, 0, 0, 0.9);
            border: 2px solid #00ff00;
            border-radius: 0.5rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            font-size: 0.5rem; /* Smaller text */
            z-index: 100;
            cursor: move;
            box-shadow: 0 4px 20px rgba(0, 255, 0, 0.3);
            resize: both;
            overflow: auto;
            min-width: 3rem;
            min-height: 2rem;
            max-width: 15rem;
            max-height: 10rem;
        }

        /* Resize Handle Styling */
        .owncast-stream::-webkit-resizer {
            background: #00ff00;
            border-radius: 0 0 0.5rem 0;
        }

        /* Owncast Controls - Smaller */
        .owncast-controls {
            position: absolute;
            bottom: 0.1rem;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 0.1rem;
        }

        .owncast-btn {
            background: rgba(0, 255, 0, 0.2);
            border: 1px solid #00ff00;
            color: #00ff00;
            padding: 0.1rem 0.2rem;
            border-radius: 0.2rem;
            font-size: 0.5rem; /* Reduced from 0.6rem */
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .owncast-btn:hover {
            background: rgba(0, 255, 0, 0.4);
        }

        .owncast-title {
            font-weight: bold;
            margin-bottom: 0.2rem;
        }

        .owncast-status {
            color: #00ff00;
            font-size: 0.5rem; /* Reduced from 0.7rem */
        }

        /* HOMEBASE - Reduced spacing */
        .homebase {
            background: #000000;
            border-top: 2px solid #333;
            padding: 0.3rem; /* Reduced from 8px 5px */
            display: flex;
            flex-direction: column;
            gap: 0.4rem; /* Reduced from 8px */
            min-height: 8rem; /* Reduced from 120px */
        }

        .homebase-row {
            display: flex;
            flex-direction: column;
            gap: 0.4rem; /* Reduced spacing */
        }

        /* Money Row - Reduced spacing */
        .money-row {
            display: flex;
            justify-content: center;
            gap: 0.2rem; /* Reduced from 5px */
            padding: 0.2rem; /* Reduced from 5px */
            border-bottom: 1px solid #333;
        }

        /* Money Buttons - Smaller */
        .money-section {
            display: flex;
            gap: 0.2rem; /* Reduced from 5px */
            flex-wrap: wrap;
            justify-content: center;
        }

        .money-btn {
            background: linear-gradient(45deg, #10b981, #34d399);
            color: #000;
            border: none;
            padding: 0.4rem 0.6rem; /* Reduced from 8px 12px */
            border-radius: 0.8rem;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            min-width: 2rem; /* Reduced from 40px */
        }

        .money-btn:nth-child(2) { background: linear-gradient(45deg, #3b82f6, #60a5fa); }
        .money-btn:nth-child(3) { background: linear-gradient(45deg, #8b5cf6, #a78bfa); }
        .money-btn:nth-child(4) { background: linear-gradient(45deg, #ec4899, #f472b6); }
        .money-btn:nth-child(5) { background: linear-gradient(45deg, #f59e0b, #fbbf24); }
        .money-btn:nth-child(6) { background: linear-gradient(45deg, #ef4444, #f87171); }

        .money-btn:hover {
            transform: scale(1.1);
        }

        .money-btn:active {
            transform: scale(0.9);
        }

        /* Reaction Buttons - Smaller */
        .reaction-btn {
            width: 2rem; /* Reduced from 35px */
            height: 2rem; /* Reduced from 35px */
            border: none;
            background: rgba(255, 255, 255, 0.05);
            backdrop-filter: blur(10px);
            border-radius: 50%;
            font-size: 0.8rem; /* Reduced from 1rem */
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .reaction-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            transform: translate(-50%, -50%);
            background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, transparent 70%);
            transition: width 0.6s, height 0.6s;
            border-radius: 50%;
        }

        .reaction-btn:hover::before {
            width: 3rem; /* Reduced from 60px */
            height: 3rem; /* Reduced from 60px */
        }

        .reaction-btn:hover {
            transform: translateY(-2px) scale(1.1);
            background: rgba(255, 255, 255, 0.1);
            box-shadow: 0 4px 15px rgba(255, 255, 255, 0.2);
        }

        .reaction-btn:active {
            transform: scale(0.9);
        }

        /* Special SF/JP buttons - Smaller text */
        .sf-btn, .jp-btn {
            font-size: 0.5rem; /* Reduced from 0.7rem */
            font-weight: 700;
            background: linear-gradient(135deg, rgba(255, 0, 128, 0.2), rgba(128, 0, 255, 0.2));
            color: #fff;
            text-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            letter-spacing: 0.5px;
        }

        .jp-btn {
            background: linear-gradient(135deg, rgba(255, 215, 0, 0.2), rgba(255, 165, 0, 0.2));
        }

        .sf-btn:hover {
            box-shadow: 0 4px 15px rgba(255, 0, 128, 0.4);
        }

        .jp-btn:hover {
            box-shadow: 0 4px 15px rgba(255, 215, 0, 0.4);
        }

        /* Reaction Row - Reduced spacing */
        .reaction-row {
            display: flex;
            justify-content: center;
            gap: 0.2rem; /* Reduced from 5px */
            padding: 0.2rem; /* Reduced from 5px */
            border-bottom: 1px solid #333;
        }

        /* Reaction Section */
        .reaction-section {
            display: flex;
            gap: 0.2rem; /* Reduced from 5px */
            flex-wrap: wrap;
            justify-content: center;
        }

        /* Chat Row - Reduced spacing */
        .chat-row {
            display: flex;
            align-items: center;
            gap: 0.4rem; /* Reduced from 8px */
            padding: 0.4rem; /* Reduced from 8px */
        }

        /* Grid Buttons (Plus Signs) - Smaller */
        .grid-buttons {
            display: flex;
            gap: 0.2rem; /* Reduced from 5px */
            flex-shrink: 0;
        }

        .grid-btn {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            color: #fff;
            padding: 0.4rem 0.5rem; /* Reduced from 8px 10px */
            border-radius: 50%;
            font-size: 0.7rem; /* Reduced from 1rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 2rem; /* Reduced from 35px */
            height: 2rem; /* Reduced from 35px */
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .grid-btn:hover {
            border-color: #00ff00;
            background: rgba(0, 255, 0, 0.1);
            transform: scale(1.1);
        }

        /* Chat Input Section */
        .chat-input-section {
            display: flex;
            gap: 0.2rem; /* Reduced from 5px */
            align-items: center;
            flex: 1;
        }

        /* Chat Section */
        .chat-section {
            flex: 1;
            display: flex;
            gap: 0.2rem; /* Reduced from 5px */
            align-items: center;
            min-width: 0;
        }

        .chat-input {
            flex: 1;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid #333;
            color: #fff;
            padding: 0.4rem 0.6rem; /* Reduced from 8px 12px */
            border-radius: 1rem;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            outline: none;
            min-width: 4rem; /* Reduced from 80px */
        }

        .chat-input::placeholder {
            color: #666;
        }

        .chat-input:focus {
            border-color: #00ff00;
            box-shadow: 0 0 10px rgba(0, 255, 0, 0.3);
        }

        .send-btn {
            background: #00ff00;
            color: #000;
            border: none;
            padding: 0.4rem 0.6rem; /* Reduced from 8px 12px */
            border-radius: 0.8rem;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .send-btn:hover {
            background: #00cc00;
            transform: scale(1.05);
        }

        /* Left Side Grid Buttons - Smaller */
        .left-grid-buttons {
            position: fixed;
            left: 0.8rem; /* Reduced from 15px */
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 0.8rem; /* Reduced from 15px */
            z-index: 150;
        }

        .left-grid-buttons .grid-btn {
            background: linear-gradient(135deg, #1a1a1a 0%, #000000 100%);
            border: 2px solid #333333;
            color: #ffffff;
            width: 3rem; /* Reduced from 60px */
            height: 3rem; /* Reduced from 60px */
            border-radius: 0.6rem;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 
                0 4px 12px rgba(0, 0, 0, 0.5),
                inset 0 1px 1px rgba(255, 255, 255, 0.1);
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
        }

        .left-grid-buttons .grid-btn:hover {
            transform: translateX(0.3rem);
            border-color: #00ff00;
            background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
            box-shadow: 
                0 6px 20px rgba(0, 0, 0, 0.6),
                inset 0 1px 1px rgba(255, 255, 255, 0.2);
        }

        .left-grid-buttons .grid-btn:active {
            transform: translateX(0.1rem) scale(0.95);
            background: linear-gradient(135deg, #0066cc 0%, #004499 100%);
        }

        .left-grid-buttons .grid-btn.active {
            background: linear-gradient(135deg, #0066cc 0%, #004499 100%);
            border-color: #0088ff;
            box-shadow: 
                0 6px 20px rgba(0, 102, 204, 0.4),
                inset 0 1px 1px rgba(255, 255, 255, 0.3);
        }

        /* Grid Overlay - 64 Button Grid - Pure Black Background */
        .grid-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: #000000;
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 300;
            max-width: 100vw;
            margin: 0 auto;
        }

        .grid-overlay.active {
            display: flex;
        }

        .grid-container {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            gap: 0.15rem; /* Reduced from 3px */
            width: 90%;
            height: 70%; /* Reduced from 80% */
            max-width: 20rem; /* Reduced from 350px */
            max-height: 20rem; /* Reduced from 350px */
        }

        .grid-cell {
            background: linear-gradient(135deg, #1a1a1a 0%, #000000 100%);
            border: 1px solid #333;
            color: #fff;
            border-radius: 0.3rem;
            font-size: 0.5rem; /* Reduced from 0.7rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.2s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            min-height: 2rem; /* Reduced from 35px */
        }

        .grid-cell:hover {
            background: linear-gradient(135deg, #2a2a2a 0%, #1a1a1a 100%);
            border-color: #00ff00;
            transform: scale(1.05);
        }

        .grid-cell:active {
            background: linear-gradient(135deg, #0066cc 0%, #004499 100%);
            transform: scale(0.95);
        }

        .grid-close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: #ff4444;
            color: white;
            border: none;
            width: 2.5rem; /* Reduced from 40px */
            height: 2.5rem; /* Reduced from 40px */
            border-radius: 50%;
            font-size: 1rem; /* Reduced from 1.2rem */
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .grid-close:hover {
            background: #ff6666;
            transform: scale(1.1);
        }

        /* NAH Button - Smaller */
        .nah-btn {
            background: linear-gradient(135deg, #ff4444 0%, #cc0000 100%);
            color: #ffffff;
            border: 2px solid #ff6666;
            padding: 0.4rem 0.8rem; /* Reduced from 8px 16px */
            border-radius: 1rem;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .nah-btn:hover {
            background: linear-gradient(135deg, #ff6666 0%, #ff4444 100%);
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(255, 68, 68, 0.4);
        }

        /* YAY Button - Smaller */
        .yay-btn {
            background: linear-gradient(135deg, #00ff00 0%, #00cc00 100%);
            color: #000000;
            border: 2px solid #44ff44;
            padding: 0.4rem 0.8rem; /* Reduced from 8px 16px */
            border-radius: 1rem;
            font-size: 0.6rem; /* Reduced from 0.8rem */
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .yay-btn:hover {
            background: linear-gradient(135deg, #44ff44 0%, #00ff00 100%);
            transform: scale(1.05);
            box-shadow: 0 4px 15px rgba(0, 255, 0, 0.4);
        }

        /* Floating Reactions Container */
        .reactions-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100vh;
            pointer-events: none;
            z-index: 35;
            max-width: 100vw;
            margin: 0 auto;
        }

        .floating-reaction {
            position: absolute;
            font-size: 1.5rem; /* Reduced from 2rem */
            pointer-events: none;
            filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.4));
        }

        /* Money Container */
        .money-container {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            height: 100vh;
            pointer-events: none;
            z-index: 35;
            max-width: 100vw;
            margin: 0 auto;
        }

        /* HYPE REACTION ANIMATIONS */
        @keyframes explosiveReaction {
            0% {
                transform: translateY(0) scale(0) rotate(0deg);
                opacity: 0;
                filter: blur(0px) brightness(1) hue-rotate(0deg);
            }
            10% {
                transform: translateY(-20px) scale(1.5) rotate(180deg);
                opacity: 1;
                filter: blur(2px) brightness(2) hue-rotate(90deg);
            }
            20% {
                transform: translateY(-60px) scale(2) rotate(360deg);
                opacity: 1;
                filter: blur(0px) brightness(3) hue-rotate(180deg);
            }
            40% {
                transform: translateY(-120px) scale(1.8) rotate(540deg);
                opacity: 0.9;
                filter: blur(1px) brightness(2.5) hue-rotate(270deg);
            }
            70% {
                transform: translateY(-250px) scale(1.2) rotate(720deg);
                opacity: 0.7;
                filter: blur(3px) brightness(1.5) hue-rotate(360deg);
            }
            100% {
                transform: translateY(-400px) translateX(var(--drift)) scale(0.5) rotate(1080deg);
                opacity: 0;
                filter: blur(5px) brightness(0.5) hue-rotate(450deg);
            }
        }

        @keyframes hyperBounce {
            0% {
                transform: translateY(0) scale(0) rotate(0deg);
                opacity: 0;
                filter: drop-shadow(0 0 0px rgba(255, 255, 255, 0));
            }
            15% {
                transform: translateY(-30px) scale(1.8) rotate(90deg);
                opacity: 1;
                filter: drop-shadow(0 0 20px rgba(255, 255, 255, 1));
            }
            25% {
                transform: translateY(-10px) scale(1.2) rotate(180deg);
                opacity: 1;
                filter: drop-shadow(0 0 30px rgba(0, 255, 255, 1));
            }
            35% {
                transform: translateY(-50px) scale(2.2) rotate(270deg);
                opacity: 1;
                filter: drop-shadow(0 0 40px rgba(255, 0, 255, 1));
            }
            45% {
                transform: translateY(-20px) scale(1.5) rotate(360deg);
                opacity: 1;
                filter: drop-shadow(0 0 25px rgba(255, 255, 0, 1));
            }
            60% {
                transform: translateY(-80px) scale(1.8) rotate(450deg);
                opacity: 0.8;
                filter: drop-shadow(0 0 35px rgba(255, 128, 0, 1));
            }
            80% {
                transform: translateY(-200px) scale(1.2) rotate(630deg);
                opacity: 0.5;
                filter: drop-shadow(0 0 15px rgba(128, 255, 128, 0.8));
            }
            100% {
                transform: translateY(-350px) translateX(var(--drift)) scale(0.3) rotate(720deg);
                opacity: 0;
                filter: drop-shadow(0 0 5px rgba(255, 255, 255, 0.2));
            }
        }

        @keyframes crazySpiral {
            0% {
                transform: translateY(0) translateX(0) scale(0) rotate(0deg);
                opacity: 0;
                filter: hue-rotate(0deg) saturate(1) brightness(1);
            }
            20% {
                transform: translateY(-40px) translateX(20px) scale(1.5) rotate(180deg);
                opacity: 1;
                filter: hue-rotate(120deg) saturate(2) brightness(2);
            }
            40% {
                transform: translateY(-80px) translateX(-30px) scale(2) rotate(360deg);
                opacity: 1;
                filter: hue-rotate(240deg) saturate(3) brightness(1.5);
            }
            60% {
                transform: translateY(-140px) translateX(40px) scale(1.8) rotate(540deg);
                opacity: 0.8;
                filter: hue-rotate(360deg) saturate(2.5) brightness(2.2);
            }
            80% {
                transform: translateY(-220px) translateX(-20px) scale(1.3) rotate(720deg);
                opacity: 0.6;
                filter: hue-rotate(480deg) saturate(1.5) brightness(1.8);
            }
            100% {
                transform: translateY(-350px) translateX(var(--drift)) scale(0.4) rotate(900deg);
                opacity: 0;
                filter: hue-rotate(600deg) saturate(1) brightness(1);
            }
        }

        @keyframes megaBlast {
            0% {
                transform: translateY(0) scale(0) rotate(0deg);
                opacity: 0;
                filter: blur(0px) brightness(1) contrast(1) saturate(1);
                text-shadow: 0 0 0px rgba(255, 255, 255, 0);
            }
            5% {
                transform: translateY(-15px) scale(2.5) rotate(45deg);
                opacity: 1;
                filter: blur(1px) brightness(3) contrast(2) saturate(3);
                text-shadow: 0 0 20px rgba(255, 255, 255, 1);
            }
            15% {
                transform: translateY(-45px) scale(3) rotate(135deg);
                opacity: 1;
                filter: blur(2px) brightness(4) contrast(3) saturate(4);
                text-shadow: 0 0 40px rgba(0, 255, 255, 1);
            }
            30% {
                transform: translateY(-90px) scale(2.5) rotate(270deg);
                opacity: 1;
                filter: blur(1px) brightness(3.5) contrast(2.5) saturate(3.5);
                text-shadow: 0 0 60px rgba(255, 0, 255, 1);
            }
            50% {
                transform: translateY(-150px) scale(2) rotate(450deg);
                opacity: 0.9;
                filter: blur(3px) brightness(2.5) contrast(2) saturate(2.5);
                text-shadow: 0 0 50px rgba(255, 255, 0, 1);
            }
            70% {
                transform: translateY(-220px) scale(1.5) rotate(630deg);
                opacity: 0.7;
                filter: blur(4px) brightness(2) contrast(1.5) saturate(2);
                text-shadow: 0 0 30px rgba(255, 128, 0, 0.8);
            }
            90% {
                transform: translateY(-300px) scale(1) rotate(810deg);
                opacity: 0.3;
                filter: blur(5px) brightness(1.5) contrast(1.2) saturate(1.5);
                text-shadow: 0 0 15px rgba(128, 255, 128, 0.5);
            }
            100% {
                transform: translateY(-400px) translateX(var(--drift)) scale(0.2) rotate(1080deg);
                opacity: 0;
                filter: blur(6px) brightness(1) contrast(1) saturate(1);
                text-shadow: 0 0 5px rgba(255, 255, 255, 0.2);
            }
        }

        @keyframes moneyShoot {
            0% {
                transform: translateY(0) translateX(0) rotate(0deg) scale(0.5);
                opacity: 0;
            }
            10% {
                transform: translateY(-10vh) translateX(var(--drift-x)) rotate(90deg) scale(1);
                opacity: 1;
            }
            100% {
                transform: translateY(-80vh) translateX(calc(var(--drift-x) * 2)) rotate(720deg) scale(0.8);
                opacity: 0;
            }
        }

        /* Harmony Grid System Styles */
        .main-button {
            position: fixed;
            left: 15px;
            background: #000000;
            color: #ffffff;
            border: 1px solid #333333;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 24px;
            font-weight: bold;
            z-index: 100;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .main-button:active {
            transform: scale(0.9);
            background: #1a1a1a;
        }

        .main-button.active .icon {
            transform: rotate(45deg);
        }

        /* Button Positions */
        .button-top { top: 20px; }
        .button-middle { top: 50%; transform: translateY(-50%); }
        .button-bottom { bottom: 20px; }

        /* Icon */
        .icon {
            transition: transform 0.3s ease;
            display: inline-block;
        }

        /* Grid Overlays */
        .grid-overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.98);
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
            z-index: 90;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .grid-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        /* 8x8 Grid Container */
        .grid-container {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            gap: 5px;
            width: min(90vw, 90vh);
            height: min(90vw, 90vh);
            padding: 10px;
        }

        /* Grid Buttons (64 total) */
        .grid-button {
            background: #000000;
            color: #ffffff;
            border: 1px solid #333333;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 500;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
        }

        .grid-button:hover {
            background: #1a1a1a;
            transform: scale(1.05);
        }

        .grid-button:active {
            transform: scale(0.95);
            background: #2a2a2a;
        }

        /* Close button */
        .close-button {
            position: absolute;
            top: 20px;
            right: 20px;
            background: #000000;
            color: #ffffff;
            border: 1px solid #333333;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
            font-size: 24px;
            z-index: 101;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .close-button:active {
            transform: scale(0.9) rotate(90deg);
        }

        /* LED Display Container - HIDDEN */
        .led-display-container {
            position: fixed;
            inset: 0;
            background: #000000;
            display: none;
            z-index: 80;
            pointer-events: none;
        }

        .led-display-container.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* LED Grid */
        .led-grid {
            display: grid;
            grid-template-columns: repeat(100, 1fr);
            grid-template-rows: repeat(200, 1fr);
            gap: 0;
            width: min(100vw, 50vh);
            height: min(200vw, 100vh);
            background: #000000;
        }

        /* LED Pixels */
        .led-pixel {
            background: #000000;
            aspect-ratio: 1/1;
        }

        .led-pixel.red { background: #ff0000; }
        .led-pixel.green { background: #00ff00; }
        .led-pixel.blue { background: #0099ff; }
        .led-pixel.yellow { background: #ffff00; }
        .led-pixel.purple { background: #9900ff; }
        .led-pixel.white { background: #ffffff; }
        .led-pixel.orange { background: #ff9900; }
        .led-pixel.pink { background: #ff00ff; }
        .led-pixel.cyan { background: #00ffff; }

        /* Mobile optimizations for very small screens */
        @media (max-width: 375px) {
            .money-btn {
                padding: 0.3rem 0.4rem;
                font-size: 0.5rem;
                min-width: 1.8rem;
            }
            
            .reaction-btn {
                width: 1.8rem;
                height: 1.8rem;
                font-size: 0.7rem;
            }
            
            .sf-btn, .jp-btn {
                font-size: 0.4rem;
            }
            
            .chat-input {
                font-size: 0.5rem;
                padding: 0.3rem 0.5rem;
            }
            
            .send-btn {
                padding: 0.3rem 0.5rem;
                font-size: 0.5rem;
            }
            
            .grid-btn {
                padding: 0.3rem 0.4rem;
                font-size: 0.5rem;
                min-width: 1.5rem;
            }

            .tiktok-placeholder {
                font-size: 1rem;
            }

            .platform-corner {
                width: 2rem;
                height: 2rem;
                font-size: 0.5rem;
            }

            .owncast-stream {
                width: 5rem;
                height: 3rem;
                font-size: 0.5rem;
            }

            .homebase {
                min-height: 6rem;
                padding: 0.2rem;
            }

            .main-button {
                width: 45px;
                height: 45px;
                font-size: 20px;
            }
            
            .grid-container {
                gap: 3px;
            }
            
            .grid-button {
                font-size: 12px;
            }
        }
    </style>

    <div class="mobile-container">
        <!-- TikTok Video Area - Full Screen -->
        <div class="tiktok-area">
            <!-- Platform Switcher Corner - Only SF in corner -->
            <div class="platform-corner corner-tr">SF</div>

            <!-- Social Media Buttons - Right Side -->
            <div class="social-buttons-right">
                <button class="social-btn">IG</button>
                <button class="social-btn">TT</button>
                <button class="social-btn">FB</button>
            </div>

            <!-- Upload/Camera Controls - Smaller -->
            <div class="upload-controls">
                <button class="upload-btn">📤</button>
                <button class="upload-btn">📷</button>
            </div>

            <!-- TikTok Placeholder -->
            <div class="tiktok-placeholder">
                TIKTOK VIDEO<br>
                <small style="font-size: 0.8rem; color: #888;">(Full Screen)</small>
            </div>
        </div>

        <!-- Floating Owncast Stream -->
        <div class="owncast-stream" id="owncastStream">
            <div class="owncast-title">OWNCAST</div>
            <div class="owncast-status">LIVE</div>
            <div class="owncast-controls">
                <button class="owncast-btn" id="prevVideo">◀</button>
                <button class="owncast-btn" id="nextVideo">▶</button>
            </div>
        </div>

        <!-- Harmony Grid System - Three Black Buttons on Left -->
        <button class="main-button button-top" onclick="toggleGrid('top')">
            <span class="icon">+</span>
        </button>
        
        <button class="main-button button-middle" onclick="toggleGrid('middle')">
            <span class="icon">+</span>
        </button>
        
        <button class="main-button button-bottom" onclick="toggleGrid('bottom')">
            <span class="icon">+</span>
        </button>

        <!-- Homebase Component (Single instance) -->
        <Homebase wsUrl={wsUrl} />
    </div>

    <!-- Harmony Grid Overlays -->
    <div class="grid-overlay" id="grid-top">
        <button class="close-button" onclick="closeGrid('top')">×</button>
        <div class="grid-container" id="grid-container-top"></div>
    </div>

    <div class="grid-overlay" id="grid-middle">
        <button class="close-button" onclick="closeGrid('middle')">×</button>
        <div class="grid-container" id="grid-container-middle"></div>
    </div>

    <div class="grid-overlay" id="grid-bottom">
        <button class="close-button" onclick="closeGrid('bottom')">×</button>
        <div class="grid-container" id="grid-container-bottom"></div>
    </div>

    <!-- LED Display (Hidden) -->
    <div class="led-display-container" id="ledDisplay">
        <div class="led-grid" id="ledGrid"></div>
    </div>

    <!-- Floating Reactions Container -->
    <div id="reactions-container" class="reactions-container"></div>

    <!-- Money Container -->
    <div id="money-container" class="money-container"></div>

    <script>
        // Global functions - MUST be declared at top level for onclick handlers
        window.toggleGrid = function(position) {
            const grid = document.getElementById(`grid-${position}`);
            const button = document.querySelector(`.button-${position}`);
            
            // Check if this grid is already active
            const isActive = grid && grid.classList.contains('active');
            
            // Close all grids first
            ['top', 'middle', 'bottom'].forEach(pos => {
                const g = document.getElementById(`grid-${pos}`);
                const b = document.querySelector(`.button-${pos}`);
                if (g) g.classList.remove('active');
                if (b) b.classList.remove('active');
            });
            
            // If it wasn't active, open it
            if (!isActive && grid && button) {
                grid.classList.add('active');
                button.classList.add('active');
            }
        }

        // Close grid
        window.closeGrid = function(position) {
            const grid = document.getElementById(`grid-${position}`);
            const button = document.querySelector(`.button-${position}`);
            if (grid) grid.classList.remove('active');
            if (button) button.classList.remove('active');
        }

        // Handle button clicks
        function handleButton(grid, number) {
            console.log(`Grid: ${grid}, Button: ${number}`);
            
            // Example actions based on grid and button
            if (grid === 'top') {
                // LED control - example: light up section
                lightUpSection(number);
            } else if (grid === 'middle') {
                // Effects - example: run effect
                runEffect(number);
            } else if (grid === 'bottom') {
                // Presets - example: load preset
                loadPreset(number);
            }
        }

        // Example: Light up LED section
        function lightUpSection(section) {
            const ledDisplay = document.getElementById('ledDisplay');
            if (ledDisplay) ledDisplay.classList.add('active');
            
            // Light up a section of LEDs
            const colors = ['red', 'green', 'blue', 'yellow', 'purple', 'white', 'orange', 'pink'];
            const color = colors[section % colors.length];
            
            // Clear all LEDs
            document.querySelectorAll('.led-pixel').forEach(pixel => {
                pixel.className = 'led-pixel';
            });
            
            // Light up section
            const sectionSize = 312; // ~20000/64
            const start = (section - 1) * sectionSize;
            const end = start + sectionSize;
            
            for(let i = start; i < end && i < 20000; i++) {
                const pixel = document.getElementById(`led-${i}`);
                if (pixel) pixel.classList.add(color);
            }
        }

        // Example: Run effect
        function runEffect(effectNumber) {
            const ledDisplay = document.getElementById('ledDisplay');
            if (ledDisplay) ledDisplay.classList.add('active');
            
            // Simple wave effect
            let offset = 0;
            const interval = setInterval(() => {
                document.querySelectorAll('.led-pixel').forEach((pixel, index) => {
                    pixel.className = 'led-pixel';
                    if ((index + offset) % 100 < 50) {
                        pixel.classList.add('blue');
                    }
                });
                offset += 5;
                
                if (offset > 100) clearInterval(interval);
            }, 50);
        }

        // Example: Load preset
        function loadPreset(presetNumber) {
            console.log(`Loading preset ${presetNumber}`);
            // Would load saved configuration
        }
        
        // Initialize LED grid
        function initializeLED() {
            const ledGrid = document.getElementById('ledGrid');
            if (ledGrid) {
                // Create 20,000 LED pixels (200x100)
                for(let i = 0; i < 20000; i++) {
                    const pixel = document.createElement('div');
                    pixel.className = 'led-pixel';
                    pixel.id = `led-${i}`;
                    ledGrid.appendChild(pixel);
                }
            }
        }
        
        // Initialize Harmony System
        function initializeHarmonySystem() {
            // Initialize LED grid
            initializeLED();
            
            // Create 64-button grids for each container
            ['top', 'middle', 'bottom'].forEach(position => {
                const container = document.getElementById(`grid-container-${position}`);
                if (container) {
                    // Create 64 buttons
                    for(let i = 1; i <= 64; i++) {
                        const button = document.createElement('button');
                        button.className = 'grid-button';
                        button.textContent = i.toString();
                        button.onclick = () => handleButton(position, i);
                        container.appendChild(button);
                    }
                }
            });
        }

        class SoundFactoryHomebase {
            constructor() {
                this.init();
            }

            init() {
                this.setupReactionButtons();
                this.setupMoneyButtons();
                this.setupChatSystem();
                this.setupGridButtons();
                this.setupOwncastDragging();
                this.setupPlatformSwitcher();
            }

            setupReactionButtons() {
                const reactionButtons = document.querySelectorAll('.reaction-btn');
                
                reactionButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const emoji = button.dataset.emoji;
                        const effect = button.dataset.effect;
                        
                        // Add glow to button
                        button.style.boxShadow = '0 0 20px rgba(255, 255, 255, 0.8)';
                        setTimeout(() => button.style.boxShadow = '', 500);
                        
                        // Create floating reaction
                        this.createFloatingReaction(emoji, e.currentTarget, effect);
                    });
                });
            }

            createFloatingReaction(emoji, button, effect) {
                const reaction = document.createElement('div');
                reaction.className = 'floating-reaction';
                reaction.textContent = emoji;
                
                // Handle text reactions (SF, JP)
                if (emoji === 'SF') {
                    reaction.style.fontWeight = '700';
                    reaction.style.fontSize = '1.2rem';
                    reaction.style.background = 'linear-gradient(45deg, #ff0080, #8000ff)';
                    reaction.style.webkitBackgroundClip = 'text';
                    reaction.style.webkitTextFillColor = 'transparent';
                    reaction.style.backgroundClip = 'text';
                } else if (emoji === 'JP') {
                    reaction.style.fontWeight = '700';
                    reaction.style.fontSize = '1.2rem';
                    reaction.style.background = 'linear-gradient(45deg, #FFD700, #FFA500)';
                    reaction.style.webkitBackgroundClip = 'text';
                    reaction.style.webkitTextFillColor = 'transparent';
                    reaction.style.backgroundClip = 'text';
                }
                
                // Get button position
                const rect = button.getBoundingClientRect();
                const startX = rect.left + rect.width / 2;
                const startY = rect.top + rect.height / 2;
                
                // Position at button
                reaction.style.left = startX + 'px';
                reaction.style.bottom = (window.innerHeight - startY) + 'px';
                
                // Random drift and HYPE animation selection
                reaction.style.setProperty('--drift', (Math.random() - 0.5) * 100 + 'px');
                
                // Choose random HYPE animation
                const hypeAnimations = ['explosiveReaction', 'hyperBounce', 'crazySpiral', 'megaBlast'];
                const randomAnimation = hypeAnimations[Math.floor(Math.random() * hypeAnimations.length)];
                const duration = randomAnimation === 'megaBlast' ? '4s' : '3.5s';
                
                reaction.style.animation = `${randomAnimation} ${duration} cubic-bezier(0.4, 0, 0.2, 1) forwards`;
                
                document.getElementById('reactions-container').appendChild(reaction);
                
                // Clean up
                setTimeout(() => reaction.remove(), 3500);
            }

            setupMoneyButtons() {
                const moneyButtons = document.querySelectorAll('.money-btn');
                
                moneyButtons.forEach(button => {
                    button.addEventListener('click', (e) => {
                        const amount = parseInt(button.dataset.amount);
                        
                        // Button feedback
                        button.style.transform = 'scale(0.9)';
                        setTimeout(() => button.style.transform = '', 200);
                        
                        // Create money effect
                        this.createMoneyEffect(amount, e.currentTarget);
                    });
                });
            }

            createMoneyEffect(amount, button) {
                const billCount = Math.min(3, Math.ceil(amount / 20)); // Reduced for mobile
                
                for (let i = 0; i < billCount; i++) {
                    setTimeout(() => {
                        const money = document.createElement('div');
                        money.className = 'floating-reaction';
                        money.textContent = '$' + Math.ceil(amount / billCount);
                        money.style.fontSize = '1.2rem'; // Reduced from 1.5rem
                        money.style.fontWeight = '900';
                        money.style.color = '#10b981';
                        money.style.textShadow = '0 0 10px rgba(16, 185, 129, 0.8)';
                        
                        // Get button position
                        const rect = button.getBoundingClientRect();
                        money.style.left = (rect.left + rect.width / 2) + 'px';
                        money.style.bottom = (window.innerHeight - rect.top - rect.height / 2) + 'px';
                        
                        // Random drift
                        money.style.setProperty('--drift-x', (Math.random() - 0.5) * 80 + 'px'); // Reduced drift
                        money.style.animation = 'moneyShoot 2s ease-out forwards';
                        
                        document.getElementById('money-container').appendChild(money);
                        setTimeout(() => money.remove(), 2000);
                    }, i * 100);
                }
            }

            setupChatSystem() {
                const chatInput = document.getElementById('chatInput');
                const sendBtn = document.getElementById('sendBtn');
                
                if (!chatInput || !sendBtn) return;
                
                const sendMessage = () => {
                    const message = chatInput.value.trim();
                    if (message) {
                        console.log('Sending message:', message);
                        chatInput.value = '';
                        
                        // Visual feedback
                        sendBtn.style.background = '#00aa00';
                        setTimeout(() => sendBtn.style.background = '#00ff00', 200);
                    }
                };
                
                sendBtn.addEventListener('click', sendMessage);
                chatInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        sendMessage();
                    }
                });
            }

            setupGridButtons() {
                // Create 64-button grids for each grid container
                this.createGrid('grid-container-1');
                this.createGrid('grid-container-2');
                this.createGrid('grid-container-3');
                
                const gridButtons = document.querySelectorAll('.grid-btn');
                
                gridButtons.forEach((button, index) => {
                    button.addEventListener('click', () => {
                        const gridNumber = index + 1;
                        console.log(`Grid ${gridNumber} clicked - Opening 64-button grid`);
                        
                        // Visual feedback
                        button.style.background = 'linear-gradient(135deg, #0066cc 0%, #004499 100%)';
                        button.classList.add('active');
                        
                        // Open the corresponding grid overlay
                        this.openGrid(gridNumber);
                    });
                });
            }

            createGrid(containerId) {
                const container = document.getElementById(containerId);
                if (!container) return;
                
                // Clear existing content
                container.innerHTML = '';
                
                // Create 64 buttons (8x8 grid)
                for (let i = 1; i <= 64; i++) {
                    const cell = document.createElement('button');
                    cell.className = 'grid-cell';
                    cell.textContent = i.toString();
                    cell.addEventListener('click', () => {
                        console.log(`Grid cell ${i} clicked`);
                        // Add visual feedback
                        cell.style.background = 'linear-gradient(135deg, #0066cc 0%, #004499 100%)';
                        setTimeout(() => {
                            cell.style.background = 'linear-gradient(135deg, #1a1a1a 0%, #000000 100%)';
                        }, 200);
                    });
                    container.appendChild(cell);
                }
            }

            openGrid(gridNumber) {
                // Close any open grids first
                document.querySelectorAll('.grid-overlay').forEach(overlay => {
                    overlay.classList.remove('active');
                });
                
                // Open the selected grid
                const overlay = document.getElementById(`grid-overlay-${gridNumber}`);
                if (overlay) {
                    overlay.classList.add('active');
                }
            }

            setupOwncastDragging() {
                const owncast = document.getElementById('owncastStream');
                if (!owncast) return;
                
                let isDragging = false;
                let startX = 0, startY = 0, initialX = 0, initialY = 0;
                
                // Mouse events
                owncast.addEventListener('mousedown', (e) => {
                    isDragging = true;
                    startX = e.clientX;
                    startY = e.clientY;
                    initialX = owncast.offsetLeft;
                    initialY = owncast.offsetTop;
                    owncast.style.cursor = 'grabbing';
                });
                
                // Touch events for mobile
                owncast.addEventListener('touchstart', (e) => {
                    isDragging = true;
                    const touch = e.touches[0];
                    startX = touch.clientX;
                    startY = touch.clientY;
                    initialX = owncast.offsetLeft;
                    initialY = owncast.offsetTop;
                    e.preventDefault();
                });
                
                document.addEventListener('mousemove', (e) => {
                    if (!isDragging) return;
                    
                    const deltaX = e.clientX - startX;
                    const deltaY = e.clientY - startY;
                    
                    this.updateOwncastPosition(deltaX, deltaY, owncast, initialX, initialY);
                });
                
                document.addEventListener('touchmove', (e) => {
                    if (!isDragging) return;
                    
                    const touch = e.touches[0];
                    const deltaX = touch.clientX - startX;
                    const deltaY = touch.clientY - startY;
                    
                    this.updateOwncastPosition(deltaX, deltaY, owncast, initialX, initialY);
                    e.preventDefault();
                });
                
                document.addEventListener('mouseup', () => {
                    isDragging = false;
                    if (owncast) {
                        owncast.style.cursor = 'move';
                    }
                });
                
                document.addEventListener('touchend', () => {
                    isDragging = false;
                });
            }

            updateOwncastPosition(deltaX, deltaY, owncast, initialX, initialY) {
                let newX = initialX + deltaX;
                let newY = initialY + deltaY;
                
                // Keep within bounds
                const maxX = window.innerWidth - owncast.offsetWidth;
                const maxY = window.innerHeight - owncast.offsetHeight - 100; // Account for homebase
                
                newX = Math.max(0, Math.min(newX, maxX));
                newY = Math.max(60, Math.min(newY, maxY)); // Account for header
                
                owncast.style.left = newX + 'px';
                owncast.style.top = newY + 'px';
            }

            setupPlatformSwitcher() {
                const corners = document.querySelectorAll('.platform-corner');
                
                corners.forEach(corner => {
                    corner.addEventListener('click', () => {
                        const platform = corner.textContent;
                        console.log(`Switching to platform: ${platform}`);
                        
                        // Visual feedback
                        corner.style.background = 'rgba(0, 255, 0, 0.5)';
                        setTimeout(() => corner.style.background = 'rgba(0, 0, 0, 0.7)', 300);
                    });
                });
                
                // Upload buttons
                const uploadButtons = document.querySelectorAll('.upload-btn');
                uploadButtons.forEach(button => {
                    button.addEventListener('click', () => {
                        console.log('Upload/Camera clicked');
                        button.style.background = 'rgba(0, 255, 0, 0.5)';
                        setTimeout(() => button.style.background = 'rgba(0, 0, 0, 0.7)', 300);
                    });
                });
            }
        }

        // Close grids on overlay click
        document.querySelectorAll('.grid-overlay').forEach(overlay => {
            overlay.addEventListener('click', function(e) {
                if (e.target === overlay) {
                    const position = this.id.replace('grid-', '');
                    closeGrid(position);
                }
            });
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                ['top', 'middle', 'bottom'].forEach(closeGrid);
            } else if (e.key === '1') {
                toggleGrid('top');
            } else if (e.key === '2') {
                toggleGrid('middle');
            } else if (e.key === '3') {
                toggleGrid('bottom');
            }
        });

        // Initialize when page loads
        window.addEventListener('load', () => {
            const homebase = new SoundFactoryHomebase();
            initializeHarmonySystem();
        });
    </script>
