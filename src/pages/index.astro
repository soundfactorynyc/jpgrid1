---
// Sound Factory - Clean Modular Architecture
import MainLayout from '../components/layout/MainLayout.astro';
import TikTokFeed from '../components/TikTokFeed.astro';
import OwncastStream from '../components/OwncastStream.astro';
import GridInterface from '../components/GridInterface.astro';
import ChatSection from '../components/ChatSection.astro';
import Homebase from '../components/Homebase.astro';
import MagicalReactionSystem from '../components/MagicalReactionSystem.astro';

export interface Props {
  wsUrl?: string;
}

const { wsUrl = 'ws://localhost:8080' } = Astro.props;
---

<MainLayout title="Sound Factory - Homebase">
  <!-- Clean Component Architecture -->
  <div class="app-container">
    <!-- TikTok Feed Component -->
    <TikTokFeed editable={true} />
    
    <!-- Owncast Stream Component -->
    <OwncastStream 
      streamUrl="https://live.soundfactorynyc.com/hls/stream.m3u8"
      rtmpUrl="rtmp://stream.soundfactorynyc.com/live"
      editable={true}
    />
    
    <!-- Grid Interface Component -->
    <GridInterface />
    
    <!-- Chat Section Component -->
    <ChatSection editable={true} />
    
    <!-- Homebase Component -->
    <Homebase editable={true} />
    
    <!-- Magical Reaction System Component -->
    <MagicalReactionSystem editable={true} />
  </div>

  <!-- Edit Mode Toggle -->
  <div class="edit-toggle-container">
    <button class="edit-toggle-btn" id="editToggle" title="Toggle Edit Mode">
      ‚úèÔ∏è
    </button>
  </div>
</MainLayout>

<style>
  /* Global App Styles */
  * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    -webkit-tap-highlight-color: transparent;
  }

  body {
    font-family: 'Arial', sans-serif;
    background: #000000;
    color: #ffffff;
    overflow: hidden;
    position: fixed;
    inset: 0;
    max-width: 100vw;
    margin: 0 auto;
  }

  .app-container {
    position: relative;
    width: 100%;
    height: 100vh;
    background: #000000;
    overflow: hidden;
  }

  /* Edit Mode Toggle */
  .edit-toggle-container {
    position: fixed;
    top: 0.5rem;
    left: 0.5rem;
    z-index: 20000;
  }

  .edit-toggle-btn {
    width: 2.5rem;
    height: 2.5rem;
    background: rgba(0, 255, 0, 0.8);
    border: 3px solid #00ff00;
    border-radius: 0.5rem;
    color: #000;
    font-size: 1.2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 0 20px rgba(0, 255, 0, 0.6);
    animation: editPulse 2s infinite;
  }

  @keyframes editPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
  }

  .edit-toggle-btn:hover {
    background: rgba(0, 255, 0, 1);
    transform: scale(1.2);
  }

  /* Edit Mode Styles */
  .edit-mode {
    --edit-bg: rgba(0, 0, 0, 0.8);
    --edit-color: #00ff00;
    --edit-border: 2px solid #00ff00;
  }

  .edit-mode .app-container {
    background: var(--edit-bg);
  }

  /* Edit Status Indicator */
  .edit-status {
    position: fixed;
    bottom: 20px;
    left: 20px;
    background: rgba(0, 255, 0, 0.9);
    color: #000;
    padding: 8px 16px;
    border-radius: 20px;
    font-size: 0.8rem;
    font-weight: bold;
    display: none;
    z-index: 10001;
    box-shadow: 0 2px 10px rgba(0, 255, 0, 0.3);
  }

  .edit-mode .edit-status {
    display: block;
  }

  /* Component Edit Indicators */
  .edit-indicator {
    display: none;
    position: absolute;
    top: 5px;
    right: 5px;
    background: linear-gradient(45deg, #00ff00, #00cc00);
    color: #000;
    padding: 6px 12px;
    border-radius: 8px;
    font-size: 0.7rem;
    font-weight: bold;
    cursor: pointer;
    z-index: 1000;
    box-shadow: 0 2px 10px rgba(0, 255, 0, 0.3);
    border: 1px solid #00ff00;
    transition: all 0.3s ease;
  }

  .edit-mode .edit-indicator {
    display: block;
  }

  .edit-indicator:hover {
    transform: scale(1.1) translateY(-2px);
    box-shadow: 0 4px 20px rgba(0, 255, 0, 0.5);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .edit-toggle-btn {
      width: 2rem;
      height: 2rem;
      font-size: 1rem;
    }

    .edit-status {
      font-size: 0.7rem;
      padding: 6px 12px;
    }
  }

  /* Performance Optimizations */
  .app-container {
    contain: layout style paint;
  }

  /* Smooth transitions */
  .edit-mode * {
    transition: all 0.3s ease;
  }
</style>

<script>
  // Global Edit Mode Controller
  class EditModeController {
    constructor() {
      this.isEditMode = false;
      this.init();
    }

    init() {
      this.setupEditToggle();
      this.setupKeyboardShortcuts();
      this.addEditStatus();
    }

    setupEditToggle() {
      const editToggle = document.getElementById('editToggle');
      if (editToggle) {
        editToggle.addEventListener('click', () => {
          this.toggleEditMode();
        });
      }
    }

    toggleEditMode() {
      this.isEditMode = !this.isEditMode;
      const body = document.body;
      const editToggle = document.getElementById('editToggle');
      
      if (this.isEditMode) {
        body.classList.add('edit-mode');
        editToggle.textContent = 'üëÅÔ∏è';
        editToggle.title = 'Exit Edit Mode';
        console.log('Edit mode: ON');
        this.showEditIndicators();
      } else {
        body.classList.remove('edit-mode');
        editToggle.textContent = '‚úèÔ∏è';
        editToggle.title = 'Toggle Edit Mode';
        console.log('Edit mode: OFF');
        this.hideEditIndicators();
      }
    }

    showEditIndicators() {
      const editableElements = document.querySelectorAll('[data-editable="true"]');
      editableElements.forEach(element => {
        if (!element.querySelector('.edit-indicator')) {
          const indicator = document.createElement('div');
          indicator.className = 'edit-indicator';
          indicator.innerHTML = `
            <span class="edit-icon">‚úèÔ∏è</span>
            <span class="edit-label">EDIT</span>
          `;
          indicator.onclick = (e) => {
            e.stopPropagation();
            this.openComponentEditor(element);
          };
          element.appendChild(indicator);
          element.style.position = 'relative';
        }
      });
    }

    hideEditIndicators() {
      const indicators = document.querySelectorAll('.edit-indicator');
      indicators.forEach(indicator => indicator.remove());
    }

    openComponentEditor(element) {
      const componentType = element.className.split(' ')[0] || 'component';
      console.log(`Opening editor for: ${componentType}`);
      
      // Simple alert for now - can be expanded to full editor
      alert(`Edit mode for ${componentType} component!\n\nThis would open the component editor.`);
    }

    addEditStatus() {
      const editStatus = document.createElement('div');
      editStatus.className = 'edit-status';
      editStatus.id = 'editStatus';
      editStatus.textContent = '‚úèÔ∏è Edit Mode Active - Click components to edit';
      document.body.appendChild(editStatus);
    }

    setupKeyboardShortcuts() {
      document.addEventListener('keydown', (e) => {
        // Ctrl+E to toggle edit mode
        if (e.ctrlKey && e.key === 'e') {
          e.preventDefault();
          this.toggleEditMode();
        }
        
        // Escape to exit edit mode
        if (e.key === 'Escape' && this.isEditMode) {
          this.toggleEditMode();
        }
      });
    }
  }

  // Global App Controller
  class AppController {
    constructor() {
      this.editModeController = new EditModeController();
      this.init();
    }

    init() {
      console.log('üé≠ Sound Factory App Initialized!');
      console.log('üì± All components loaded modularly');
      console.log('‚úèÔ∏è Edit mode available - click the green button');
      
      // Make edit mode controller globally available
      window.editModeController = this.editModeController;
      
      // Global toggle function for compatibility
      window.toggleEditMode = () => {
        this.editModeController.toggleEditMode();
      };
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new AppController());
  } else {
    new AppController();
  }
</script>
</MainLayout>
