---
// MagicalReactionSystem.astro - Enhanced reaction system with JP/SF/WORK/PRIDE themes
export interface Props {
  editable?: boolean;
}

const { editable = false } = Astro.props;
---

<div class="magical-reaction-container" data-editable={editable}>
  <!-- Black Icon Watermark -->
  <div class="black-icon-watermark">‚ö´</div>
  
  <!-- Reaction Canvas for animations -->
  <canvas id="reactionCanvas" class="reaction-canvas"></canvas>
  
  <!-- Hologram Canvas for name effects -->
  <canvas id="hologramCanvas" class="hologram-canvas"></canvas>
  
  <!-- Reaction Buttons -->
  <div class="reaction-buttons">
    <!-- Original Reactions -->
    <button class="reaction-btn love" data-type="love" data-emoji="üíú" data-value="0">üíú</button>
    <button class="reaction-btn fire" data-type="fire" data-emoji="üî•" data-value="0">üî•</button>
    
    <!-- Money Reactions -->
    <button class="reaction-btn money-1" data-type="money" data-value="1">$1</button>
    <button class="reaction-btn money-5" data-type="money" data-value="5">$5</button>
    <button class="reaction-btn money-10" data-type="money" data-value="10">$10</button>
    <button class="reaction-btn money-20" data-type="money" data-value="20">$20</button>
    <button class="reaction-btn money-50" data-type="money" data-value="50">$50</button>
    <button class="reaction-btn money-100" data-type="money" data-value="100">$100</button>
    
    <!-- Theme Reactions -->
    <button class="reaction-btn theme-jp" data-theme="jp">üóæ</button>
    <button class="reaction-btn theme-sf" data-theme="sf">üåâ</button>
    <button class="reaction-btn theme-work" data-theme="work">üíª</button>
    <button class="reaction-btn theme-pride" data-theme="pride">üè≥Ô∏è‚Äçüåà</button>
  </div>
  
  <!-- Enhanced Controls Toggle Button -->
  <button class="controls-toggle" id="controlsToggle">
    üéÆ Effects
  </button>
  
  <!-- Control Panel (Hidden by default) -->
  <div class="control-panel" id="controlPanel">
    <h3>üéÆ Effects Control</h3>
    
    <div class="knobs-container">
      <!-- Intensity Knob -->
      <div class="knob-control">
        <div class="knob-wrapper">
          <div class="knob" id="intensityKnob" 
               data-min="0.1" 
               data-max="3" 
               data-value="1" 
               data-step="0.1"
               data-precision="1"
               role="slider"
               tabindex="0"
               aria-label="Particle Intensity">
            <div class="knob-indicator"></div>
            <div class="knob-value">1.0</div>
          </div>
        </div>
        <div class="knob-label">Intensity</div>
      </div>
      
      <!-- Speed Knob -->
      <div class="knob-control">
        <div class="knob-wrapper">
          <div class="knob" id="speedKnob" 
               data-min="0.5" 
               data-max="2" 
               data-value="1"
               data-step="0.1"
               data-precision="1"
               role="slider"
               tabindex="0"
               aria-label="Animation Speed">
            <div class="knob-indicator"></div>
            <div class="knob-value">1.0</div>
          </div>
        </div>
        <div class="knob-label">Speed</div>
      </div>
      
      <!-- Shake Knob -->
      <div class="knob-control">
        <div class="knob-wrapper">
          <div class="knob" id="shakeKnob" 
               data-min="0" 
               data-max="50" 
               data-value="20"
               data-step="5"
               data-precision="0"
               role="slider"
               tabindex="0"
               aria-label="Screen Shake">
            <div class="knob-indicator"></div>
            <div class="knob-value">20</div>
          </div>
        </div>
        <div class="knob-label">Shake</div>
      </div>
      
      <!-- Magic Knob -->
      <div class="knob-control">
        <div class="knob-wrapper">
          <div class="knob" id="magicKnob" 
               data-min="0" 
               data-max="10" 
               data-value="5"
               data-step="1"
               data-precision="0"
               role="slider"
               tabindex="0"
               aria-label="Magic Level">
            <div class="knob-indicator"></div>
            <div class="knob-value">5</div>
          </div>
        </div>
        <div class="knob-label">Magic Level</div>
      </div>
    </div>
    
    <div class="effects-display">
      <div id="effectsStatus">Adjust knobs to control the magic! ‚ú®</div>
    </div>
  </div>
</div>

<style>
/* Reset and Base */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* Container */
.magical-reaction-container {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    background: radial-gradient(ellipse at center, #1a1a1a 0%, #0a0a0a 100%);
}

/* Black Icon Watermark */
.black-icon-watermark {
    position: absolute;
    bottom: 20px;
    left: 20px;
    font-size: 40px;
    opacity: 0.3;
    z-index: 1;
    pointer-events: none;
    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.1));
}

/* Canvases */
.reaction-canvas, 
.hologram-canvas {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
}

.reaction-canvas {
    z-index: 9999;
}

.hologram-canvas {
    z-index: 10000;
}

/* Button Container */
.reaction-buttons {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    padding: 20px;
    background: rgba(0, 0, 0, 0.9);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border-radius: 24px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    box-shadow: 
        0 10px 40px rgba(0, 0, 0, 0.8),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
    z-index: 10001;
    max-width: 90vw;
}

/* Reaction Buttons */
.reaction-btn {
    width: 56px;
    height: 56px;
    border: none;
    border-radius: 16px;
    font-size: 24px;
    cursor: pointer;
    transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    position: relative;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 
        0 4px 20px rgba(0, 0, 0, 0.4),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

/* Button Ripple Effect */
.reaction-btn::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 0;
    height: 0;
    border-radius: 50%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.4), transparent);
    transform: translate(-50%, -50%);
    transition: width 0.6s, height 0.6s;
}

/* Button States */
.reaction-btn:hover {
    transform: translateY(-4px) scale(1.08);
    box-shadow: 
        0 8px 30px rgba(0, 0, 0, 0.6),
        inset 0 1px 0 rgba(255, 255, 255, 0.3);
}

.reaction-btn:active,
.reaction-btn.clicked {
    transform: translateY(-1px) scale(1.02);
    box-shadow: 
        0 2px 10px rgba(0, 0, 0, 0.4),
        inset 0 1px 3px rgba(0, 0, 0, 0.3);
}

.reaction-btn:active::before {
    width: 120px;
    height: 120px;
}

/* Button Theme Colors */
.reaction-btn.love { 
    background: linear-gradient(135deg, #ff006e, #ff4589); 
}

.reaction-btn.fire { 
    background: linear-gradient(135deg, #ff6b35, #ff8c5a); 
}

.reaction-btn.money-1 { 
    background: linear-gradient(135deg, #85bb65, #98d982); 
    color: #2F5233; 
    font-weight: bold;
}

.reaction-btn.money-5,
.reaction-btn.money-10 { 
    background: linear-gradient(135deg, #228B22, #32CD32); 
    font-weight: bold;
}

.reaction-btn.money-20,
.reaction-btn.money-50,
.reaction-btn.money-100 { 
    background: linear-gradient(135deg, #ffd700, #ffed4e); 
    color: #000; 
    font-weight: bold;
}

/* Theme Buttons */
.reaction-btn.theme-jp {
    background: linear-gradient(135deg, #FF0066, #FF1493);
}

.reaction-btn.theme-sf {
    background: linear-gradient(135deg, #00CED1, #4682B4);
}

.reaction-btn.theme-work {
    background: linear-gradient(135deg, #00FF00, #32CD32);
}

.reaction-btn.theme-pride {
    background: linear-gradient(135deg, 
        #E40303 0%, 
        #FF8C00 20%, 
        #FFED00 40%, 
        #008026 60%, 
        #24408E 80%, 
        #732982 100%);
}

/* Controls Toggle Button */
.controls-toggle {
    position: fixed;
    bottom: 100px;
    right: 20px;
    padding: 12px 20px;
    background: linear-gradient(135deg, #ff006e, #8338ec);
    border: none;
    border-radius: 20px;
    color: white;
    font-weight: bold;
    font-size: 14px;
    cursor: pointer;
    z-index: 10002;
    transition: all 0.3s ease;
    box-shadow: 
        0 4px 20px rgba(255, 0, 110, 0.3),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.controls-toggle:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 
        0 8px 30px rgba(255, 0, 110, 0.4),
        inset 0 1px 0 rgba(255, 255, 255, 0.3);
}

.controls-toggle:active {
    transform: translateY(0) scale(1.02);
}

/* Control Panel */
.control-panel {
    position: fixed;
    top: 20px;
    right: 20px;
    width: 340px;
    background: rgba(0, 0, 0, 0.95);
    backdrop-filter: blur(30px);
    -webkit-backdrop-filter: blur(30px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 24px;
    padding: 30px;
    z-index: 10001;
    box-shadow: 
        0 10px 40px rgba(0, 0, 0, 0.8),
        inset 0 1px 0 rgba(255, 255, 255, 0.05);
    transform: translateX(100%);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.control-panel.active {
    transform: translateX(0);
    opacity: 1;
    visibility: visible;
}

.control-panel h3 {
    margin: 0 0 25px;
    font-size: 20px;
    font-weight: 600;
    text-align: center;
    background: linear-gradient(135deg, #ff006e, #8338ec);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

/* Knobs Container */
.knobs-container {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 25px;
    margin-bottom: 25px;
}

/* Knob Control */
.knob-control {
    text-align: center;
}

.knob-wrapper {
    position: relative;
    width: 90px;
    height: 90px;
    margin: 0 auto 12px;
}

/* Enhanced Knob */
.knob {
    width: 90px;
    height: 90px;
    border-radius: 50%;
    background: radial-gradient(circle at 30% 30%, #4a4a4a, #1a1a1a);
    box-shadow: 
        0 8px 25px rgba(0, 0, 0, 0.6),
        inset 0 -3px 8px rgba(0, 0, 0, 0.8),
        inset 0 3px 8px rgba(255, 255, 255, 0.1);
    cursor: grab;
    position: relative;
    transition: transform 0.1s ease-out, box-shadow 0.2s ease-out;
    will-change: transform;
}

.knob:hover {
    box-shadow: 
        0 10px 30px rgba(0, 0, 0, 0.7),
        inset 0 -3px 8px rgba(0, 0, 0, 0.8),
        inset 0 3px 8px rgba(255, 255, 255, 0.15),
        0 0 20px rgba(255, 0, 110, 0.2);
}

.knob:active,
.knob.dragging {
    cursor: grabbing;
    transform: scale(0.96);
    box-shadow: 
        0 5px 15px rgba(0, 0, 0, 0.5),
        inset 0 -2px 5px rgba(0, 0, 0, 0.8),
        inset 0 2px 5px rgba(255, 255, 255, 0.1);
}

/* Knob Indicator */
.knob-indicator {
    position: absolute;
    top: 8px;
    left: 50%;
    width: 6px;
    height: 30px;
    background: linear-gradient(to bottom, 
        #ff006e 0%, 
        #ff4589 50%, 
        #ff006e 100%);
    border-radius: 3px;
    transform: translateX(-50%);
    transform-origin: center 37px;
    box-shadow: 
        0 0 15px rgba(255, 0, 110, 0.8),
        inset 0 0 3px rgba(255, 255, 255, 0.5);
    transition: transform 0.05s linear;
}

/* Knob Value */
.knob-value {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 16px;
    font-weight: bold;
    color: #fff;
    text-shadow: 
        0 0 10px rgba(255, 255, 255, 0.5),
        0 2px 4px rgba(0, 0, 0, 0.8);
    pointer-events: none;
}

/* Knob Label */
.knob-label {
    font-size: 12px;
    color: #999;
    text-transform: uppercase;
    letter-spacing: 1.5px;
    font-weight: 500;
}

/* Effects Display */
.effects-display {
    background: rgba(255, 255, 255, 0.03);
    border: 1px solid rgba(255, 255, 255, 0.08);
    border-radius: 12px;
    padding: 18px;
    font-size: 12px;
    color: #aaa;
    text-align: center;
    line-height: 1.6;
    transition: all 0.3s ease;
}

.effects-display:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.12);
    color: #fff;
}

/* Screen Flash Effect */
.screen-flash {
    animation: flash-fade 0.5s ease-out;
}

@keyframes flash-fade {
    0% { opacity: 1; }
    100% { opacity: 0; }
}

/* Accessibility */
.knob:focus {
    outline: none;
    box-shadow: 
        0 10px 30px rgba(0, 0, 0, 0.7),
        inset 0 -3px 8px rgba(0, 0, 0, 0.8),
        inset 0 3px 8px rgba(255, 255, 255, 0.15),
        0 0 0 3px rgba(255, 0, 110, 0.5);
}

/* Mobile Responsive */
@media (max-width: 768px) {
    .control-panel {
        top: 10px;
        right: 10px;
        width: calc(100vw - 20px);
        max-width: 320px;
        padding: 20px;
    }
    
    .knobs-container {
        gap: 20px;
    }
    
    .knob-wrapper {
        width: 75px;
        height: 75px;
    }
    
    .knob {
        width: 75px;
        height: 75px;
    }
    
    .knob-indicator {
        height: 25px;
        transform-origin: center 31px;
    }
    
    .reaction-buttons {
        bottom: 10px;
        padding: 15px;
        gap: 10px;
    }
    
    .reaction-btn {
        width: 48px;
        height: 48px;
        font-size: 20px;
        border-radius: 12px;
    }
}

@media (max-width: 480px) {
    .control-panel {
        position: fixed;
        top: auto;
        bottom: 80px;
        right: 10px;
        left: 10px;
        width: auto;
        max-width: none;
    }
    
    .reaction-buttons {
        justify-content: center;
    }
}

/* Performance Optimizations */
@media (prefers-reduced-motion: reduce) {
    * {
        animation-duration: 0.01ms !important;
        animation-iteration-count: 1 !important;
        transition-duration: 0.01ms !important;
    }
    
    .knob {
        transition: none;
    }
    
    .reaction-btn {
        transition: transform 0.1s;
    }
}

/* High Contrast Mode */
@media (prefers-contrast: high) {
    .control-panel,
    .reaction-buttons {
        border-width: 2px;
        border-color: #fff;
    }
    
    .knob {
        border: 2px solid #fff;
    }
    
    .reaction-btn {
        border: 2px solid #000;
    }
}
</style>

<script type="module">
  import { ReactionController } from '/src/components/reactions/ReactionController.js';
  
  // Initialize the system
  const controller = new ReactionController();
  
  // Make controller available globally for debugging
  window.reactionController = controller;
  
  // Setup controls toggle functionality
  const setupControlsToggle = () => {
    const toggleButton = document.getElementById('controlsToggle');
    const controlPanel = document.getElementById('controlPanel');
    
    if (toggleButton && controlPanel) {
      toggleButton.addEventListener('click', () => {
        controlPanel.classList.toggle('active');
        
        // Update button text
        const isActive = controlPanel.classList.contains('active');
        toggleButton.textContent = isActive ? '‚úï Close' : 'üéÆ Effects';
      });
    }
  };
  
  // Initialize toggle functionality
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', setupControlsToggle);
  } else {
    setupControlsToggle();
  }
  
  // Log usage instructions
  console.log(`
‚ú® Magical Reaction System - JP SF WORK Edition ‚ú®

API Usage:
- window.magicalReaction.shoot(content, type, value)
- window.magicalReaction.shootTheme('jp' | 'sf' | 'work' | 'pride')
- window.magicalReaction.updateConfig({ particleIntensity: 2, ... })
- window.magicalReaction.clear()
- window.magicalReaction.getStats()

Examples:
- window.magicalReaction.shoot('üå∏', 'jp', 30)
- window.magicalReaction.shootTheme('pride')
- window.magicalReaction.updateConfig({ magicLevel: 10 })
  `);
</script>
