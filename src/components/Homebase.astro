---
// Homebase Component - Interactive Control Panel
export interface Props {
  editable?: boolean;
}

const { editable = false } = Astro.props;
---

<div class="homebase-container" data-editable={editable}>
  <!-- Control Buttons Row -->
  <div class="control-row">
    <button class="control-btn hey-btn" data-action="hey">HEY</button>
    <button class="control-btn nah-btn" data-action="nah">NAH</button>
    <button class="control-btn mute-btn" data-action="mute-live">üîá Live</button>
    <button class="control-btn mute-btn" data-action="mute-video">üîá Video</button>
    <button class="control-btn block-btn" data-action="block">Block</button>
  </div>

  <!-- Money Buttons Row -->
  <div class="money-row">
    <button class="money-btn" data-value="1">$1</button>
    <button class="money-btn" data-value="5">$5</button>
    <button class="money-btn" data-value="10">$10</button>
    <button class="money-btn" data-value="20">$20</button>
    <button class="money-btn" data-value="50">$50</button>
    <button class="money-btn" data-value="100">$100</button>
  </div>

  <!-- Reaction Buttons Row -->
  <div class="reaction-row">
    <button class="reaction-btn" data-emoji="üî•">üî•</button>
    <button class="reaction-btn" data-emoji="üéß">üéß</button>
    <button class="reaction-btn" data-emoji="‚ù§Ô∏è">‚ù§Ô∏è</button>
    <button class="reaction-btn" data-emoji="SF">SF</button>
    <button class="reaction-btn" data-emoji="JP">JP</button>
    <button class="reaction-btn" data-emoji="üë†">üë†</button>
    <button class="reaction-btn" data-emoji="üè≥Ô∏è‚Äçüåà">üè≥Ô∏è‚Äçüåà</button>
    <button class="reaction-btn" data-emoji="üíÉ">üíÉ</button>
  </div>

  <!-- Chat Input Row -->
  <div class="chat-row">
    <button class="add-btn">+</button>
    <input type="text" class="chat-input" placeholder="Type your message..." />
    <button class="send-btn">Send</button>
  </div>
</div>

<style>
  .homebase-container {
    background: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);
    border-radius: 12px;
    padding: 16px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
    max-width: 600px;
    margin: 0 auto;
  }

  .control-row, .money-row, .reaction-row, .chat-row {
    display: flex;
    gap: 8px;
    margin-bottom: 12px;
    flex-wrap: wrap;
    justify-content: center;
  }

  .chat-row {
    margin-bottom: 0;
  }

  /* Control Buttons */
  .control-btn {
    padding: 8px 16px;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    font-size: 12px;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    min-width: 60px;
  }

  .hey-btn {
    background: linear-gradient(135deg, #32CD32, #228B22);
    color: white;
  }

  .nah-btn {
    background: linear-gradient(135deg, #DC143C, #8B0000);
    color: white;
  }

  .mute-btn {
    background: linear-gradient(135deg, #FF8C00, #FF6347);
    color: white;
  }

  .block-btn {
    background: linear-gradient(135deg, #8B0000, #4B0000);
    color: white;
  }

  .control-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .control-btn:active {
    transform: translateY(0);
  }

  /* Money Buttons */
  .money-btn {
    padding: 10px 16px;
    border: none;
    border-radius: 8px;
    font-weight: bold;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
    min-width: 50px;
    color: white;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
  }

  .money-btn[data-value="1"] {
    background: linear-gradient(135deg, #32CD32, #228B22);
  }

  .money-btn[data-value="5"] {
    background: linear-gradient(135deg, #9370DB, #663399);
  }

  .money-btn[data-value="10"] {
    background: linear-gradient(135deg, #FF69B4, #C71585);
  }

  .money-btn[data-value="20"] {
    background: linear-gradient(135deg, #FF8C00, #FF6347);
  }

  .money-btn[data-value="50"] {
    background: linear-gradient(135deg, #FFD700, #FFA500);
  }

  .money-btn[data-value="100"] {
    background: linear-gradient(135deg, #FF1493, #DC143C);
  }

  .money-btn:hover {
    transform: translateY(-2px) scale(1.05);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.4);
  }

  .money-btn:active {
    transform: translateY(0) scale(1);
  }

  /* Reaction Buttons */
  .reaction-btn {
    width: 45px;
    height: 45px;
    border: none;
    border-radius: 50%;
    font-size: 18px;
    cursor: pointer;
    transition: all 0.2s ease;
    background: linear-gradient(135deg, #333, #555);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .reaction-btn:hover {
    transform: translateY(-3px) scale(1.1);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    background: linear-gradient(135deg, #555, #777);
  }

  .reaction-btn:active {
    transform: translateY(-1px) scale(1.05);
  }

  /* Chat Input */
  .chat-row {
    align-items: center;
  }

  .add-btn {
    width: 40px;
    height: 40px;
    border: none;
    border-radius: 50%;
    background: linear-gradient(135deg, #666, #888);
    color: white;
    font-size: 20px;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .add-btn:hover {
    background: linear-gradient(135deg, #888, #aaa);
    transform: scale(1.1);
  }

  .chat-input {
    flex: 1;
    padding: 10px 16px;
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 14px;
    outline: none;
    transition: all 0.2s ease;
  }

  .chat-input::placeholder {
    color: rgba(255, 255, 255, 0.6);
  }

  .chat-input:focus {
    border-color: #ff006e;
    background: rgba(255, 255, 255, 0.15);
    box-shadow: 0 0 0 2px rgba(255, 0, 110, 0.2);
  }

  .send-btn {
    padding: 10px 20px;
    border: none;
    border-radius: 20px;
    background: linear-gradient(135deg, #32CD32, #228B22);
    color: white;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease;
    margin-left: 8px;
  }

  .send-btn:hover {
    background: linear-gradient(135deg, #228B22, #006400);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(50, 205, 50, 0.3);
  }

  .send-btn:active {
    transform: translateY(0);
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .homebase-container {
      padding: 12px;
      margin: 0 10px;
    }

    .control-row, .money-row, .reaction-row {
      gap: 6px;
    }

    .control-btn {
      padding: 6px 12px;
      font-size: 11px;
      min-width: 50px;
    }

    .money-btn {
      padding: 8px 12px;
      font-size: 12px;
      min-width: 40px;
    }

    .reaction-btn {
      width: 40px;
      height: 40px;
      font-size: 16px;
    }

    .chat-input {
      font-size: 13px;
      padding: 8px 12px;
    }

    .send-btn {
      padding: 8px 16px;
      font-size: 13px;
    }
  }

  /* Button Press Effects */
  .control-btn.pressed,
  .money-btn.pressed,
  .reaction-btn.pressed {
    animation: buttonPress 0.3s ease;
  }

  @keyframes buttonPress {
    0% { transform: scale(1); }
    50% { transform: scale(0.95); }
    100% { transform: scale(1); }
  }

  /* Glow Effects for Active States */
  .control-btn:focus,
  .money-btn:focus,
  .reaction-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(255, 0, 110, 0.3);
  }
</style>

<script>
  class HomebaseController {
    constructor() {
      this.reactionsContainer = null;
      this.moneyContainer = null;
      this.isEditable = false;
      this.init();
    }

    init() {
      console.log('Initializing Homebase Controller...');
      
      // Check if we're in editable mode
      const container = document.querySelector('.homebase-container');
      this.isEditable = container?.dataset.editable === 'true';
      
      // Create containers for reactions and money
      this.createContainers();
      
      // Set up button handlers
      this.setupControlButtons();
      this.setupMoneyButtons();
      this.setupReactionButtons();
      this.setupChatInput();
      
      // Set up edit mode if enabled
      if (this.isEditable) {
        this.setupEditMode();
      }
      
      console.log('Homebase Controller initialized successfully!');
    }

    createContainers() {
      console.log('Created reactions container');
      console.log('Created money container');
    }

    setupControlButtons() {
      const controlButtons = document.querySelectorAll('.control-btn');
      controlButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const action = e.target.dataset.action;
          this.handleControlAction(action, e.target);
        });
      });
      console.log('Setting up control buttons...');
      console.log('HEY button handler added');
      console.log('NAH button handler added');
      console.log('Mute Live button handler added');
      console.log('Mute Video button handler added');
      console.log('Block button handler added');
    }

    setupMoneyButtons() {
      const moneyButtons = document.querySelectorAll('.money-btn');
      moneyButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const value = parseInt(e.target.dataset.value);
          this.shootMoney(value, e.target);
        });
      });
    }

    setupReactionButtons() {
      const reactionButtons = document.querySelectorAll('.reaction-btn');
      reactionButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const emoji = e.target.dataset.emoji;
          this.shootReaction(emoji, e.target);
        });
      });
    }

    setupChatInput() {
      const chatInput = document.querySelector('.chat-input');
      const sendButton = document.querySelector('.send-btn');
      const addButton = document.querySelector('.add-btn');

      if (sendButton) {
        sendButton.addEventListener('click', () => {
          this.sendMessage();
        });
      }

      if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') {
            this.sendMessage();
          }
        });
      }

      if (addButton) {
        addButton.addEventListener('click', () => {
          console.log('Add button clicked');
        });
      }
    }

    setupEditMode() {
      console.log('Setting up Homebase edit mode...');
      // Edit mode functionality would go here
    }

    handleControlAction(action: string, button: HTMLElement) {
      this.addButtonPressEffect(button);
      
      switch (action) {
        case 'hey':
          console.log('HEY action triggered');
          this.shootReaction('üëã', button);
          break;
        case 'nah':
          console.log('NAH action triggered');
          this.shootReaction('üëé', button);
          break;
        case 'mute-live':
          console.log('Mute Live action triggered');
          break;
        case 'mute-video':
          console.log('Mute Video action triggered');
          break;
        case 'block':
          console.log('Block action triggered');
          this.shootReaction('üö´', button);
          break;
      }
    }

    shootMoney(value: number, button: HTMLElement) {
      this.addButtonPressEffect(button);
      console.log(`Shooting $${value}`);
      
      // Try to use magical reaction system with retry mechanism
      this.tryMagicalReaction(`$${value}`, 'money', value, button);
    }

    shootReaction(emoji: string, button: HTMLElement) {
      this.addButtonPressEffect(button);
      console.log(`Shooting reaction: ${emoji}`);
      
      // Try to use magical reaction system with retry mechanism
      const reactionType = this.getReactionType(emoji);
      this.tryMagicalReaction(emoji, reactionType, 0, button);
    }

    tryMagicalReaction(content: string, type: string, value: number, button: HTMLElement, retries: number = 0) {
      if (typeof window !== 'undefined' && (window as any).shootMagicalReaction) {
        console.log(`‚úÖ Using magical reaction system: ${content}`);
        (window as any).shootMagicalReaction(content, type, value);
      } else if (retries < 10) {
        // Retry after a short delay (magical system might still be initializing)
        console.log(`‚è≥ Waiting for magical reaction system... (attempt ${retries + 1})`);
        setTimeout(() => {
          this.tryMagicalReaction(content, type, value, button, retries + 1);
        }, 100);
      } else {
        console.log('‚ùå Magical reaction system not available after retries, using fallback');
        this.fallbackAnimation(button, content);
      }
    }

    getReactionType(emoji: string | undefined): string {
      const typeMap: { [key: string]: string } = {
        'üî•': 'fire',
        'üéß': 'music',
        '‚ù§Ô∏è': 'love',
        'SF': 'slay',
        'JP': 'nyc',
        'üë†': 'sparkle',
        'üè≥Ô∏è‚Äçüåà': 'sparkle',
        'üíÉ': 'sparkle',
        'üëã': 'wave',
        'üëé': 'nah',
        'üö´': 'block'
      };
      return typeMap[emoji || ''] || 'sparkle';
    }

    fallbackAnimation(button: HTMLElement, content: string) {
      // Simple fallback animation when magical system isn't available
      const rect = button.getBoundingClientRect();
      const flyingElement = document.createElement('div');
      
      flyingElement.textContent = content;
      flyingElement.style.cssText = `
        position: fixed;
        left: ${rect.left + rect.width / 2}px;
        top: ${rect.top}px;
        font-size: 24px;
        font-weight: bold;
        color: #ff006e;
        pointer-events: none;
        z-index: 9999;
        transition: all 1s ease-out;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
      `;
      
      document.body.appendChild(flyingElement);
      
      // Animate upward
      setTimeout(() => {
        flyingElement.style.transform = 'translateY(-100px) scale(1.5)';
        flyingElement.style.opacity = '0';
      }, 50);
      
      // Remove element
      setTimeout(() => {
        flyingElement.remove();
      }, 1050);
    }

    addButtonPressEffect(button: HTMLElement) {
      button.classList.add('pressed');
      setTimeout(() => {
        button.classList.remove('pressed');
      }, 300);
    }

    sendMessage() {
      const chatInput = document.querySelector('.chat-input') as HTMLInputElement;
      if (chatInput && chatInput.value.trim()) {
        console.log('Sending message:', chatInput.value);
        
        // Use magical reaction system for chat messages
        if (typeof window !== 'undefined' && (window as any).shootMagicalReaction) {
          (window as any).shootMagicalReaction(chatInput.value, 'chat', 0);
        }
        
        chatInput.value = '';
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new HomebaseController());
  } else {
    new HomebaseController();
  }
</script>
