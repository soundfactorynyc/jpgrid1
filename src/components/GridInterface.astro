---
// src/components/GridInterface.astro
// Optimized grid interface with better performance

export interface Props {
  onButtonClick?: (grid: string, button: number) => void;
}

const { onButtonClick } = Astro.props;
---

<div class="grid-interface">
  <!-- Three Black Buttons on Left -->
  <button class="main-button button-top" data-grid="top" aria-label="Open top grid">
    <span class="icon">+</span>
  </button>
  
  <button class="main-button button-middle" data-grid="middle" aria-label="Open middle grid">
    <span class="icon">+</span>
  </button>
  
  <button class="main-button button-bottom" data-grid="bottom" aria-label="Open bottom grid">
    <span class="icon">+</span>
  </button>

  <!-- Grid Overlays -->
  {['top', 'middle', 'bottom'].map((position) => (
    <div class="grid-overlay" id={`grid-${position}`}>
      <button class="close-button" data-close={position} aria-label="Close grid">Ã—</button>
      <div class="grid-container" data-position={position}>
        {[...Array(64)].map((_, i) => (
          <button 
            class="grid-button" 
            data-index={i + 1}
            aria-label={`Grid button ${i + 1}`}
          >
            {i + 1}
          </button>
        ))}
      </div>
    </div>
  ))}
</div>

<style>
  /* Grid Interface Styles - Optimized with CSS containment */
  .grid-interface {
    position: relative;
    z-index: 100;
    contain: layout style;
  }

  /* Three Black Buttons - with will-change for smooth animations */
  .main-button {
    position: fixed;
    left: 15px;
    background: #000000;
    color: #ffffff;
    border: 1px solid #333333;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 24px;
    font-weight: bold;
    z-index: 100;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease, background-color 0.2s ease;
    will-change: transform;
    -webkit-tap-highlight-color: transparent;
    touch-action: manipulation;
  }

  .main-button:active {
    transform: scale(0.9);
    background: #1a1a1a;
  }

  /* Button Positions */
  .button-top { top: 20px; }
  .button-middle { top: 50%; transform: translateY(-50%); }
  .button-bottom { bottom: 20px; }

  /* Icon - GPU accelerated rotation */
  .icon {
    transition: transform 0.2s ease;
    display: inline-block;
    will-change: transform;
  }

  .main-button.active .icon {
    transform: rotate(45deg);
  }

  /* Grid Overlays - Optimized with transform instead of opacity */
  .grid-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.98);
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease, visibility 0.2s ease;
    z-index: 90;
    display: flex;
    align-items: center;
    justify-content: center;
    contain: layout style paint;
    pointer-events: none;
  }

  .grid-overlay.active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }

  /* 8x8 Grid Container - CSS Grid optimizations */
  .grid-container {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    grid-template-rows: repeat(8, 1fr);
    gap: 5px;
    width: min(90vw, 90vh);
    height: min(90vw, 90vh);
    padding: 10px;
    contain: layout style;
  }

  /* Grid Buttons - Optimized hover states */
  .grid-button {
    background: #000000;
    color: #ffffff;
    border: 1px solid #333333;
    border-radius: 8px;
    cursor: pointer;
    font-size: 16px;
    font-weight: 500;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.15s ease, background-color 0.15s ease;
    will-change: transform;
    touch-action: manipulation;
    user-select: none;
    -webkit-user-select: none;
  }

  /* Use media query for hover to avoid hover states on touch devices */
  @media (hover: hover) {
    .grid-button:hover {
      background: #1a1a1a;
      transform: scale(1.05);
    }
  }

  .grid-button:active {
    transform: scale(0.95);
    background: #2a2a2a;
  }

  /* Close button - Optimized */
  .close-button {
    position: absolute;
    top: 20px;
    right: 20px;
    background: #000000;
    color: #ffffff;
    border: 1px solid #333333;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 24px;
    z-index: 101;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: transform 0.2s ease;
    touch-action: manipulation;
  }

  .close-button:active {
    transform: scale(0.9) rotate(90deg);
  }

  /* Mobile optimizations with reduced motion */
  @media (max-width: 768px) {
    .main-button {
      width: 45px;
      height: 45px;
      font-size: 20px;
    }
    
    .grid-container {
      gap: 3px;
    }
    
    .grid-button {
      font-size: 12px;
    }
  }

  /* Respect reduced motion preferences */
  @media (prefers-reduced-motion: reduce) {
    * {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

<script>
  class GridController {
    constructor() {
      this.activeGrid = null;
      this.elements = new Map();
      this.touchStartY = 0;
      this.init();
    }

    init() {
      // Cache DOM elements
      this.cacheElements();
      
      // Use event delegation for better performance
      this.setupEventDelegation();
      
      // Setup keyboard shortcuts with debouncing
      this.setupKeyboardShortcuts();
      
      // Prevent iOS bounce
      this.preventIOSBounce();
    }

    cacheElements() {
      // Cache all frequently accessed elements
      document.querySelectorAll('.main-button').forEach(btn => {
        const grid = btn.dataset.grid;
        this.elements.set(`button-${grid}`, btn);
        this.elements.set(`grid-${grid}`, document.getElementById(`grid-${grid}`));
      });
    }

    setupEventDelegation() {
      // Single event listener for all clicks
      document.addEventListener('click', this.handleClick.bind(this), { passive: true });
      
      // Touch events for better mobile response
      document.addEventListener('touchstart', this.handleTouchStart.bind(this), { passive: true });
      document.addEventListener('touchend', this.handleTouchEnd.bind(this), { passive: false });
    }

    handleClick(e) {
      const target = e.target;
      
      // Main button click
      if (target.closest('.main-button')) {
        const button = target.closest('.main-button');
        this.toggleGrid(button.dataset.grid);
        return;
      }
      
      // Close button click
      if (target.closest('.close-button')) {
        const button = target.closest('.close-button');
        this.closeGrid(button.dataset.close);
        return;
      }
      
      // Grid button click
      if (target.classList.contains('grid-button')) {
        const container = target.closest('.grid-container');
        const position = container.dataset.position;
        const index = target.dataset.index;
        
        // Use requestAnimationFrame for smooth visual feedback
        requestAnimationFrame(() => {
          target.style.transform = 'scale(0.9)';
          
          setTimeout(() => {
            target.style.transform = '';
          }, 150);
        });
        
        // Emit event
        this.emitGridButtonClick(position, index);
        return;
      }
      
      // Click on overlay to close
      if (target.classList.contains('grid-overlay')) {
        const gridName = target.id.replace('grid-', '');
        this.closeGrid(gridName);
      }
    }

    handleTouchStart(e) {
      this.touchStartY = e.touches[0].clientY;
    }

    handleTouchEnd(e) {
      // Prevent pull-to-refresh
      if (this.activeGrid) {
        e.preventDefault();
      }
    }

    toggleGrid(gridName) {
      const grid = this.elements.get(`grid-${gridName}`);
      const button = this.elements.get(`button-${gridName}`);
      
      if (!grid || !button) return;
      
      // Check if this grid is already active
      const isActive = grid.classList.contains('active');
      
      // Use requestAnimationFrame for smooth animations
      requestAnimationFrame(() => {
        // Close all grids first
        this.closeAllGrids();
        
        // If it wasn't active, open it
        if (!isActive) {
          grid.classList.add('active');
          button.classList.add('active');
          this.activeGrid = gridName;
          
          // Prevent body scroll
          document.body.style.overflow = 'hidden';
          document.body.style.position = 'fixed';
          document.body.style.width = '100%';
        } else {
          this.activeGrid = null;
          // Restore body scroll
          document.body.style.overflow = '';
          document.body.style.position = '';
          document.body.style.width = '';
        }
      });
    }

    closeGrid(gridName) {
      const grid = this.elements.get(`grid-${gridName}`);
      const button = this.elements.get(`button-${gridName}`);
      
      if (!grid || !button) return;
      
      requestAnimationFrame(() => {
        grid.classList.remove('active');
        button.classList.remove('active');
        
        if (this.activeGrid === gridName) {
          this.activeGrid = null;
          // Restore body scroll
          document.body.style.overflow = '';
          document.body.style.position = '';
          document.body.style.width = '';
        }
      });
    }

    closeAllGrids() {
      ['top', 'middle', 'bottom'].forEach(pos => {
        const grid = this.elements.get(`grid-${pos}`);
        const button = this.elements.get(`button-${pos}`);
        if (grid && button) {
          grid.classList.remove('active');
          button.classList.remove('active');
        }
      });
    }

    setupKeyboardShortcuts() {
      let lastKeyTime = 0;
      const keyDelay = 200; // Debounce delay
      
      document.addEventListener('keydown', (e) => {
        const now = Date.now();
        if (now - lastKeyTime < keyDelay) return;
        lastKeyTime = now;
        
        switch(e.key) {
          case 'Escape':
            if (this.activeGrid) {
              this.closeGrid(this.activeGrid);
            }
            break;
          case '1':
            this.toggleGrid('top');
            break;
          case '2':
            this.toggleGrid('middle');
            break;
          case '3':
            this.toggleGrid('bottom');
            break;
        }
      }, { passive: true });
    }

    preventIOSBounce() {
      document.addEventListener('touchmove', (e) => {
        if (this.activeGrid) {
          e.preventDefault();
        }
      }, { passive: false });
    }

    emitGridButtonClick(position, index) {
      // Use custom event with better performance
      const event = new CustomEvent('gridButtonClick', {
        detail: { grid: position, button: index },
        bubbles: true,
        composed: true
      });
      window.dispatchEvent(event);
    }
  }

  // Initialize only after DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new GridController());
  } else {
    new GridController();
  }
</script>
